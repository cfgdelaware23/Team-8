{"version":3,"file":"infoerror-token-parser.js","names":["_token","require","parseToken","parser","options","callback","readUInt16LE","readUInt32LE","number","readUInt8","state","clazz","readUsVarChar","message","readBVarChar","serverName","procName","tdsVersion","call","lineNumber","infoParser","data","InfoMessageToken","errorParser","ErrorMessageToken"],"sources":["../../src/token/infoerror-token-parser.ts"],"sourcesContent":["import Parser, { type ParserOptions } from './stream-parser';\n\nimport { InfoMessageToken, ErrorMessageToken } from './token';\n\ninterface TokenData {\n  number: number;\n  state: number;\n  class: number;\n  message: string;\n  serverName: string;\n  procName: string;\n  lineNumber: number;\n}\n\nfunction parseToken(parser: Parser, options: ParserOptions, callback: (data: TokenData) => void) {\n  // length\n  parser.readUInt16LE(() => {\n    parser.readUInt32LE((number) => {\n      parser.readUInt8((state) => {\n        parser.readUInt8((clazz) => {\n          parser.readUsVarChar((message) => {\n            parser.readBVarChar((serverName) => {\n              parser.readBVarChar((procName) => {\n                (options.tdsVersion < '7_2' ? parser.readUInt16LE : parser.readUInt32LE).call(parser, (lineNumber: number) => {\n                  callback({\n                    'number': number,\n                    'state': state,\n                    'class': clazz,\n                    'message': message,\n                    'serverName': serverName,\n                    'procName': procName,\n                    'lineNumber': lineNumber\n                  });\n                });\n              });\n            });\n          });\n        });\n      });\n    });\n  });\n}\n\nexport function infoParser(parser: Parser, options: ParserOptions, callback: (token: InfoMessageToken) => void) {\n  parseToken(parser, options, (data) => {\n    callback(new InfoMessageToken(data));\n  });\n}\n\nexport function errorParser(parser: Parser, options: ParserOptions, callback: (token: ErrorMessageToken) => void) {\n  parseToken(parser, options, (data) => {\n    callback(new ErrorMessageToken(data));\n  });\n}\n"],"mappings":";;;;;;;AAEA,IAAAA,MAAA,GAAAC,OAAA;AAYA,SAASC,UAAUA,CAACC,MAAc,EAAEC,OAAsB,EAAEC,QAAmC,EAAE;EAC/F;EACAF,MAAM,CAACG,YAAY,CAAC,MAAM;IACxBH,MAAM,CAACI,YAAY,CAAEC,MAAM,IAAK;MAC9BL,MAAM,CAACM,SAAS,CAAEC,KAAK,IAAK;QAC1BP,MAAM,CAACM,SAAS,CAAEE,KAAK,IAAK;UAC1BR,MAAM,CAACS,aAAa,CAAEC,OAAO,IAAK;YAChCV,MAAM,CAACW,YAAY,CAAEC,UAAU,IAAK;cAClCZ,MAAM,CAACW,YAAY,CAAEE,QAAQ,IAAK;gBAChC,CAACZ,OAAO,CAACa,UAAU,GAAG,KAAK,GAAGd,MAAM,CAACG,YAAY,GAAGH,MAAM,CAACI,YAAY,EAAEW,IAAI,CAACf,MAAM,EAAGgB,UAAkB,IAAK;kBAC5Gd,QAAQ,CAAC;oBACP,QAAQ,EAAEG,MAAM;oBAChB,OAAO,EAAEE,KAAK;oBACd,OAAO,EAAEC,KAAK;oBACd,SAAS,EAAEE,OAAO;oBAClB,YAAY,EAAEE,UAAU;oBACxB,UAAU,EAAEC,QAAQ;oBACpB,YAAY,EAAEG;kBAChB,CAAC,CAAC;gBACJ,CAAC,CAAC;cACJ,CAAC,CAAC;YACJ,CAAC,CAAC;UACJ,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAEO,SAASC,UAAUA,CAACjB,MAAc,EAAEC,OAAsB,EAAEC,QAA2C,EAAE;EAC9GH,UAAU,CAACC,MAAM,EAAEC,OAAO,EAAGiB,IAAI,IAAK;IACpChB,QAAQ,CAAC,IAAIiB,uBAAgB,CAACD,IAAI,CAAC,CAAC;EACtC,CAAC,CAAC;AACJ;AAEO,SAASE,WAAWA,CAACpB,MAAc,EAAEC,OAAsB,EAAEC,QAA4C,EAAE;EAChHH,UAAU,CAACC,MAAM,EAAEC,OAAO,EAAGiB,IAAI,IAAK;IACpChB,QAAQ,CAAC,IAAImB,wBAAiB,CAACH,IAAI,CAAC,CAAC;EACvC,CAAC,CAAC;AACJ"}