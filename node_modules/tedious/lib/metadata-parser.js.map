{"version":3,"file":"metadata-parser.js","names":["_collation","require","_dataType","_sprintfJs","readCollation","parser","callback","readBuffer","collationData","Collation","fromBuffer","readSchema","readUInt8","schemaPresent","readBVarChar","dbname","owningSchema","readUsVarChar","xmlSchemaCollection","undefined","readUDTInfo","readUInt16LE","maxByteSize","typeName","assemblyName","metadataParse","options","tdsVersion","readUInt32LE","call","userType","flags","typeNumber","type","TYPE","Error","sprintf","name","collation","precision","scale","dataLength","schema","udtInfo","_default","exports","default","module"],"sources":["../src/metadata-parser.ts"],"sourcesContent":["import { Collation } from './collation';\nimport Parser, { type ParserOptions } from './token/stream-parser';\nimport { TYPE, type DataType } from './data-type';\nimport { type CryptoMetadata } from './always-encrypted/types';\n\nimport { sprintf } from 'sprintf-js';\n\ninterface XmlSchema {\n  dbname: string;\n  owningSchema: string;\n  xmlSchemaCollection: string;\n}\n\ninterface UdtInfo {\n  maxByteSize: number;\n  dbname: string;\n  owningSchema: string;\n  typeName: string;\n  assemblyName: string;\n}\n\nexport type BaseMetadata = {\n  userType: number;\n\n  flags: number;\n  /**\n   * The column's type, such as VarChar, Int or Binary.\n   */\n  type: DataType;\n\n  collation: Collation | undefined;\n  /**\n   * The precision. Only applicable to numeric and decimal.\n   */\n  precision: number | undefined;\n\n  /**\n   * The scale. Only applicable to numeric, decimal, time, datetime2 and datetimeoffset.\n   */\n  scale: number | undefined;\n\n  /**\n   * The length, for char, varchar, nvarchar and varbinary.\n   */\n  dataLength: number | undefined;\n\n  schema: XmlSchema | undefined;\n\n  udtInfo: UdtInfo | undefined;\n}\n\nexport type Metadata = {\n  cryptoMetadata?: CryptoMetadata;\n} & BaseMetadata;\n\n\nfunction readCollation(parser: Parser, callback: (collation: Collation) => void) {\n  // s2.2.5.1.2\n  parser.readBuffer(5, (collationData) => {\n    callback(Collation.fromBuffer(collationData));\n  });\n}\n\nfunction readSchema(parser: Parser, callback: (schema: XmlSchema | undefined) => void) {\n  // s2.2.5.5.3\n  parser.readUInt8((schemaPresent) => {\n    if (schemaPresent === 0x01) {\n      parser.readBVarChar((dbname) => {\n        parser.readBVarChar((owningSchema) => {\n          parser.readUsVarChar((xmlSchemaCollection) => {\n            callback({\n              dbname: dbname,\n              owningSchema: owningSchema,\n              xmlSchemaCollection: xmlSchemaCollection\n            });\n          });\n        });\n      });\n    } else {\n      callback(undefined);\n    }\n  });\n}\n\nfunction readUDTInfo(parser: Parser, callback: (udtInfo: UdtInfo | undefined) => void) {\n  parser.readUInt16LE((maxByteSize) => {\n    parser.readBVarChar((dbname) => {\n      parser.readBVarChar((owningSchema) => {\n        parser.readBVarChar((typeName) => {\n          parser.readUsVarChar((assemblyName) => {\n            callback({\n              maxByteSize: maxByteSize,\n              dbname: dbname,\n              owningSchema: owningSchema,\n              typeName: typeName,\n              assemblyName: assemblyName\n            });\n          });\n        });\n      });\n    });\n  });\n}\n\nfunction metadataParse(parser: Parser, options: ParserOptions, callback: (metadata: Metadata) => void) {\n  (options.tdsVersion < '7_2' ? parser.readUInt16LE : parser.readUInt32LE).call(parser, (userType) => {\n    parser.readUInt16LE((flags) => {\n      parser.readUInt8((typeNumber) => {\n        const type: DataType = TYPE[typeNumber];\n\n        if (!type) {\n          throw new Error(sprintf('Unrecognised data type 0x%02X', typeNumber));\n        }\n\n        switch (type.name) {\n          case 'Null':\n          case 'TinyInt':\n          case 'SmallInt':\n          case 'Int':\n          case 'BigInt':\n          case 'Real':\n          case 'Float':\n          case 'SmallMoney':\n          case 'Money':\n          case 'Bit':\n          case 'SmallDateTime':\n          case 'DateTime':\n          case 'Date':\n            return callback({\n              userType: userType,\n              flags: flags,\n              type: type,\n              collation: undefined,\n              precision: undefined,\n              scale: undefined,\n              dataLength: undefined,\n              schema: undefined,\n              udtInfo: undefined\n            });\n\n          case 'IntN':\n          case 'FloatN':\n          case 'MoneyN':\n          case 'BitN':\n          case 'UniqueIdentifier':\n          case 'DateTimeN':\n            return parser.readUInt8((dataLength) => {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: undefined,\n                dataLength: dataLength,\n                schema: undefined,\n                udtInfo: undefined\n              });\n            });\n\n          case 'Variant':\n            return parser.readUInt32LE((dataLength) => {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: undefined,\n                dataLength: dataLength,\n                schema: undefined,\n                udtInfo: undefined\n              });\n            });\n\n          case 'VarChar':\n          case 'Char':\n          case 'NVarChar':\n          case 'NChar':\n            return parser.readUInt16LE((dataLength) => {\n              readCollation(parser, (collation) => {\n                callback({\n                  userType: userType,\n                  flags: flags,\n                  type: type,\n                  collation: collation,\n                  precision: undefined,\n                  scale: undefined,\n                  dataLength: dataLength,\n                  schema: undefined,\n                  udtInfo: undefined\n                });\n              });\n            });\n\n          case 'Text':\n          case 'NText':\n            return parser.readUInt32LE((dataLength) => {\n              readCollation(parser, (collation) => {\n                callback({\n                  userType: userType,\n                  flags: flags,\n                  type: type,\n                  collation: collation,\n                  precision: undefined,\n                  scale: undefined,\n                  dataLength: dataLength,\n                  schema: undefined,\n                  udtInfo: undefined\n                });\n              });\n            });\n\n          case 'VarBinary':\n          case 'Binary':\n            return parser.readUInt16LE((dataLength) => {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: undefined,\n                dataLength: dataLength,\n                schema: undefined,\n                udtInfo: undefined\n              });\n            });\n\n          case 'Image':\n            return parser.readUInt32LE((dataLength) => {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: undefined,\n                dataLength: dataLength,\n                schema: undefined,\n                udtInfo: undefined\n              });\n            });\n\n          case 'Xml':\n            return readSchema(parser, (schema) => {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: undefined,\n                dataLength: undefined,\n                schema: schema,\n                udtInfo: undefined\n              });\n            });\n\n          case 'Time':\n          case 'DateTime2':\n          case 'DateTimeOffset':\n            return parser.readUInt8((scale) => {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: scale,\n                dataLength: undefined,\n                schema: undefined,\n                udtInfo: undefined\n              });\n            });\n\n          case 'NumericN':\n          case 'DecimalN':\n            return parser.readUInt8((dataLength) => {\n              parser.readUInt8((precision) => {\n                parser.readUInt8((scale) => {\n                  callback({\n                    userType: userType,\n                    flags: flags,\n                    type: type,\n                    collation: undefined,\n                    precision: precision,\n                    scale: scale,\n                    dataLength: dataLength,\n                    schema: undefined,\n                    udtInfo: undefined\n                  });\n                });\n              });\n            });\n\n          case 'UDT':\n            return readUDTInfo(parser, (udtInfo) => {\n              callback({\n                userType: userType,\n                flags: flags,\n                type: type,\n                collation: undefined,\n                precision: undefined,\n                scale: undefined,\n                dataLength: undefined,\n                schema: undefined,\n                udtInfo: udtInfo\n              });\n            });\n\n          default:\n            throw new Error(sprintf('Unrecognised type %s', type.name));\n        }\n      });\n    });\n  });\n}\n\nexport default metadataParse;\nexport { readCollation };\n\nmodule.exports = metadataParse;\nmodule.exports.readCollation = readCollation;\n"],"mappings":"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"}