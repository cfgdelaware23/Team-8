{"version":3,"file":"connection.js","names":["_crypto","_interopRequireDefault","require","_os","tls","_interopRequireWildcard","net","_dns","_constants","_stream","_identity","_bulkLoad","_debug","_events","_instanceLookup","_transientErrorLookup","_packet","_preloginPayload","_login7Payload","_ntlmPayload","_request","_rpcrequestPayload","_sqlbatchPayload","_messageIo","_tokenStreamParser","_transaction","_errors","_connector","_library","_tdsVersions","_message","_ntlm","_nodeAbortController","_dataType","_bulkLoadPayload","_specialStoredProcedure","_esAggregateError","_package","_url","_handler","_getRequireWildcardCache","nodeInterop","WeakMap","cacheBabelInterop","cacheNodeInterop","obj","__esModule","default","cache","has","get","newObj","hasPropertyDescriptor","Object","defineProperty","getOwnPropertyDescriptor","key","prototype","hasOwnProperty","call","desc","set","KEEP_ALIVE_INITIAL_DELAY","DEFAULT_CONNECT_TIMEOUT","DEFAULT_CLIENT_REQUEST_TIMEOUT","DEFAULT_CANCEL_TIMEOUT","DEFAULT_CONNECT_RETRY_INTERVAL","DEFAULT_PACKET_SIZE","DEFAULT_TEXTSIZE","DEFAULT_DATEFIRST","DEFAULT_PORT","DEFAULT_TDS_VERSION","DEFAULT_LANGUAGE","DEFAULT_DATEFORMAT","CLEANUP_TYPE","NORMAL","REDIRECT","RETRY","Connection","EventEmitter","fedAuthRequired","config","secureContextOptions","inTransaction","transactionDescriptors","transactionDepth","isSqlBatch","curTransientRetryCount","transientErrorLookup","closed","loginError","debug","ntlmpacket","ntlmpacketBuffer","routingData","messageIo","state","resetConnectionOnNextRequest","request","procReturnStatusValue","socket","messageBuffer","connectTimer","cancelTimer","requestTimer","retryTimer","_cancelAfterRequestSent","databaseCollation","constructor","TypeError","server","authentication","undefined","type","options","domain","userName","password","toUpperCase","clientId","tenantId","token","clientSecret","abortTransactionOnError","appName","camelCaseColumns","cancelTimeout","columnEncryptionKeyCacheTTL","columnEncryptionSetting","columnNameReplacer","connectionRetryInterval","connectTimeout","connector","connectionIsolationLevel","ISOLATION_LEVEL","READ_COMMITTED","cryptoCredentialsDetails","database","datefirst","dateFormat","data","packet","payload","enableAnsiNull","enableAnsiNullDefault","enableAnsiPadding","enableAnsiWarnings","enableArithAbort","enableConcatNullYieldsNull","enableCursorCloseOnCommit","enableImplicitTransactions","enableNumericRoundabort","enableQuotedIdentifier","encrypt","fallbackToDefaultDb","encryptionKeyStoreProviders","instanceName","isolationLevel","language","localAddress","maxRetriesOnTransientErrors","multiSubnetFailover","packetSize","port","readOnlyIntent","requestTimeout","rowCollectionOnDone","rowCollectionOnRequestCompletion","serverName","serverSupportsColumnEncryption","tdsVersion","textsize","trustedServerNameAE","trustServerCertificate","useColumnNames","useUTC","workstationId","lowerCaseGuids","Error","assertValidIsolationLevel","RangeError","secureOptions","create","value","constants","SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS","createDebug","Buffer","from","alloc","TransientErrorLookup","STATE","INITIALIZED","sendMessage","TYPE","ATTENTION","createCancelTimer","connect","connectListener","ConnectionError","name","onConnect","err","removeListener","onError","once","transitionTo","CONNECTING","on","event","listener","emit","args","close","FINAL","initialiseConnection","signal","createConnectTimer","connectOnPort","instanceLookup","timeout","then","process","nextTick","clearConnectTimer","aborted","message","cleanupConnection","cleanupType","clearRequestTimer","clearRetryTimer","closeConnection","RequestError","callback","Debug","createTokenStreamParser","handler","TokenStreamParser","socketHandlingForSendPreLogin","error","socketError","socketClose","socketEnd","setKeepAlive","MessageIO","cleartext","log","sendPreLogin","SENT_PRELOGIN","wrapWithTls","throwIfAborted","Promise","resolve","reject","secureContext","createSecureContext","isIP","encryptOptions","host","ALPNProtocols","servername","encryptsocket","onAbort","destroy","reason","removeEventListener","addEventListener","customConnector","connectOpts","connectInParallel","connectInSequence","dns","lookup","end","catch","controller","AbortController","setTimeout","abort","clearCancelTimer","createRequestTimer","createRetryTimer","retryTimeout","hostPostfix","routingMessage","dispatchEvent","cancel","clearTimeout","newState","exit","enter","apply","getEventHandler","eventName","events","SENT_TLSSSLNEGOTIATION","code","REROUTING","TRANSIENT_FAILURE_RETRY","major","minor","build","exec","version","PreloginPayload","Number","subbuild","PRELOGIN","toString","sendLogin7Packet","Login7Payload","versions","clientProgVer","clientPid","pid","connectionId","clientTimeZone","Date","getTimezoneOffset","clientLcid","fedAuth","echo","workflow","fedAuthToken","sspi","createNTLMRequest","hostname","os","libraryName","initDbFatal","LOGIN7","toBuffer","sendFedAuthTokenMessage","accessTokenLen","byteLength","offset","writeUInt32LE","write","FEDAUTH_TOKEN","SENT_LOGIN7_WITH_STANDARD_LOGIN","sendInitialSql","SqlBatchPayload","getInitialSql","currentTransactionDescriptor","Message","SQL_BATCH","outgoingMessageStream","Readable","pipe","push","getIsolationLevelText","join","processedInitialSql","execSqlBatch","makeRequest","sqlTextOrProcedure","execSql","validateParameters","parameters","TYPES","NVarChar","output","length","precision","scale","makeParamsParameter","RPC_REQUEST","RpcRequestPayload","Procedures","Sp_ExecuteSql","newBulkLoad","table","callbackOrOptions","BulkLoad","execBulkLoad","bulkLoad","rows","executionStarted","streamingMode","firstRowWritten","rowStream","rowToPacketTransform","onCancel","BulkLoadPayload","Request","getBulkInsertSql","BULK_LOAD","prepare","Int","preparing","handle","Sp_Prepare","unprepare","Sp_Unprepare","execute","executeParameters","i","len","parameter","validate","Sp_Execute","callProcedure","beginTransaction","transaction","Transaction","isolationLevelToTSQL","TRANSACTION_MANAGER","beginPayload","commitTransaction","commitPayload","rollbackTransaction","rollbackPayload","saveTransaction","savePayload","cb","useSavepoint","crypto","randomBytes","txDone","done","LOGGED_IN","txErr","packetType","canceled","connection","rowCount","rst","payloadStream","unpipe","ignore","paused","resume","resetConnection","SENT_CLIENT_REQUEST","reset","READ_UNCOMMITTED","REPEATABLE_READ","SERIALIZABLE","SNAPSHOT","isTransientError","AggregateError","errors","isTransient","_default","exports","module","readMessage","concat","preloginPayload","encryptionString","_this$routingData","startTls","SENT_LOGIN7_WITH_FEDAUTH","SENT_LOGIN7_WITH_NTLM","reconnect","retry","Login7TokenHandler","tokenStreamParser","loginAckReceived","LOGGED_IN_SENDING_INITIAL_SQL","NTLMResponsePayload","NTLMAUTH_PKT","fedAuthInfoToken","stsurl","spn","tokenScope","URL","credentials","UsernamePasswordCredential","msiArgs","ManagedIdentityCredential","managedIdentityClientId","DefaultAzureCredential","ClientSecretCredential","tokenResponse","getToken","InitialSqlTokenHandler","_this$request","_this$request3","_this$request10","RequestTokenHandler","SENT_ATTENTION","onResume","onPause","_this$request2","pause","_this$request4","_this$request5","onEndOfMessage","_this$request6","_this$request7","_this$request8","_this$request9","sqlRequest","nextState","AttentionTokenHandler","attentionReceived"],"sources":["../src/connection.ts"],"sourcesContent":["import crypto from 'crypto';\nimport os from 'os';\nimport * as tls from 'tls';\nimport * as net from 'net';\nimport dns from 'dns';\n\nimport constants from 'constants';\nimport { type SecureContextOptions } from 'tls';\n\nimport { Readable } from 'stream';\n\nimport {\n  DefaultAzureCredential,\n  ClientSecretCredential,\n  ManagedIdentityCredential,\n  UsernamePasswordCredential,\n} from '@azure/identity';\n\nimport BulkLoad, { type Options as BulkLoadOptions, type Callback as BulkLoadCallback } from './bulk-load';\nimport Debug from './debug';\nimport { EventEmitter, once } from 'events';\nimport { instanceLookup } from './instance-lookup';\nimport { TransientErrorLookup } from './transient-error-lookup';\nimport { TYPE } from './packet';\nimport PreloginPayload from './prelogin-payload';\nimport Login7Payload from './login7-payload';\nimport NTLMResponsePayload from './ntlm-payload';\nimport Request from './request';\nimport RpcRequestPayload from './rpcrequest-payload';\nimport SqlBatchPayload from './sqlbatch-payload';\nimport MessageIO from './message-io';\nimport { Parser as TokenStreamParser } from './token/token-stream-parser';\nimport { Transaction, ISOLATION_LEVEL, assertValidIsolationLevel } from './transaction';\nimport { ConnectionError, RequestError } from './errors';\nimport { connectInParallel, connectInSequence } from './connector';\nimport { name as libraryName } from './library';\nimport { versions } from './tds-versions';\nimport Message from './message';\nimport { type Metadata } from './metadata-parser';\nimport { createNTLMRequest } from './ntlm';\nimport { ColumnEncryptionAzureKeyVaultProvider } from './always-encrypted/keystore-provider-azure-key-vault';\n\nimport { AbortController, AbortSignal } from 'node-abort-controller';\nimport { type Parameter, TYPES } from './data-type';\nimport { BulkLoadPayload } from './bulk-load-payload';\nimport { Collation } from './collation';\nimport Procedures from './special-stored-procedure';\n\nimport AggregateError from 'es-aggregate-error';\nimport { version } from '../package.json';\nimport { URL } from 'url';\nimport { AttentionTokenHandler, InitialSqlTokenHandler, Login7TokenHandler, RequestTokenHandler, TokenHandler } from './token/handler';\n\ntype BeginTransactionCallback =\n  /**\n   * The callback is called when the request to start the transaction has completed,\n   * either successfully or with an error.\n   * If an error occurred then `err` will describe the error.\n   *\n   * As only one request at a time may be executed on a connection, another request should not\n   * be initiated until this callback is called.\n   *\n   * @param err If an error occurred, an [[Error]] object with details of the error.\n   * @param transactionDescriptor A Buffer that describe the transaction\n   */\n  (err: Error | null | undefined, transactionDescriptor?: Buffer) => void\n\ntype SaveTransactionCallback =\n  /**\n   * The callback is called when the request to set a savepoint within the\n   * transaction has completed, either successfully or with an error.\n   * If an error occurred then `err` will describe the error.\n   *\n   * As only one request at a time may be executed on a connection, another request should not\n   * be initiated until this callback is called.\n   *\n   * @param err If an error occurred, an [[Error]] object with details of the error.\n   */\n  (err: Error | null | undefined) => void;\n\ntype CommitTransactionCallback =\n  /**\n   * The callback is called when the request to commit the transaction has completed,\n   * either successfully or with an error.\n   * If an error occurred then `err` will describe the error.\n   *\n   * As only one request at a time may be executed on a connection, another request should not\n   * be initiated until this callback is called.\n   *\n   * @param err If an error occurred, an [[Error]] object with details of the error.\n   */\n  (err: Error | null | undefined) => void;\n\ntype RollbackTransactionCallback =\n  /**\n   * The callback is called when the request to rollback the transaction has\n   * completed, either successfully or with an error.\n   * If an error occurred then err will describe the error.\n   *\n   * As only one request at a time may be executed on a connection, another request should not\n   * be initiated until this callback is called.\n   *\n   * @param err If an error occurred, an [[Error]] object with details of the error.\n   */\n  (err: Error | null | undefined) => void;\n\ntype ResetCallback =\n  /**\n   * The callback is called when the connection reset has completed,\n   * either successfully or with an error.\n   *\n   * If an error occurred then `err` will describe the error.\n   *\n   * As only one request at a time may be executed on a connection, another\n   * request should not be initiated until this callback is called\n   *\n   * @param err If an error occurred, an [[Error]] object with details of the error.\n   */\n  (err: Error | null | undefined) => void;\n\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\ntype TransactionCallback<T extends (err: Error | null | undefined, ...args: any[]) => void> =\n  /**\n   * The callback is called when the request to start a transaction (or create a savepoint, in\n   * the case of a nested transaction) has completed, either successfully or with an error.\n   * If an error occurred, then `err` will describe the error.\n   * If no error occurred, the callback should perform its work and eventually call\n   * `done` with an error or null (to trigger a transaction rollback or a\n   * transaction commit) and an additional completion callback that will be called when the request\n   * to rollback or commit the current transaction has completed, either successfully or with an error.\n   * Additional arguments given to `done` will be passed through to this callback.\n   *\n   * As only one request at a time may be executed on a connection, another request should not\n   * be initiated until the completion callback is called.\n   *\n   * @param err If an error occurred, an [[Error]] object with details of the error.\n   * @param txDone If no error occurred, a function to be called to commit or rollback the transaction.\n   */\n  (err: Error | null | undefined, txDone?: TransactionDone<T>) => void;\n\ntype TransactionDoneCallback = (err: Error | null | undefined, ...args: any[]) => void;\ntype CallbackParameters<T extends (err: Error | null | undefined, ...args: any[]) => any> = T extends (err: Error | null | undefined, ...args: infer P) => any ? P : never;\n\ntype TransactionDone<T extends (err: Error | null | undefined, ...args: any[]) => void> =\n  /**\n   * If no error occurred, a function to be called to commit or rollback the transaction.\n   *\n   * @param err If an err occurred, a string with details of the error.\n   */\n  (err: Error | null | undefined, done: T, ...args: CallbackParameters<T>) => void;\n\n/**\n * @private\n */\nconst KEEP_ALIVE_INITIAL_DELAY = 30 * 1000;\n/**\n * @private\n */\nconst DEFAULT_CONNECT_TIMEOUT = 15 * 1000;\n/**\n * @private\n */\nconst DEFAULT_CLIENT_REQUEST_TIMEOUT = 15 * 1000;\n/**\n * @private\n */\nconst DEFAULT_CANCEL_TIMEOUT = 5 * 1000;\n/**\n * @private\n */\nconst DEFAULT_CONNECT_RETRY_INTERVAL = 500;\n/**\n * @private\n */\nconst DEFAULT_PACKET_SIZE = 4 * 1024;\n/**\n * @private\n */\nconst DEFAULT_TEXTSIZE = 2147483647;\n/**\n * @private\n */\nconst DEFAULT_DATEFIRST = 7;\n/**\n * @private\n */\nconst DEFAULT_PORT = 1433;\n/**\n * @private\n */\nconst DEFAULT_TDS_VERSION = '7_4';\n/**\n * @private\n */\nconst DEFAULT_LANGUAGE = 'us_english';\n/**\n * @private\n */\nconst DEFAULT_DATEFORMAT = 'mdy';\n\ninterface AzureActiveDirectoryMsiAppServiceAuthentication {\n  type: 'azure-active-directory-msi-app-service';\n  options: {\n    /**\n     * If you user want to connect to an Azure app service using a specific client account\n     * they need to provide `clientId` asscoiate to their created idnetity.\n     *\n     * This is optional for retrieve token from azure web app service\n     */\n    clientId?: string;\n  };\n}\n\ninterface AzureActiveDirectoryMsiVmAuthentication {\n  type: 'azure-active-directory-msi-vm';\n  options: {\n    /**\n     * If you want to connect using a specific client account\n     * they need to provide `clientId` associated to their created identity.\n     *\n     * This is optional for retrieve a token\n     */\n    clientId?: string;\n  };\n}\n\ninterface AzureActiveDirectoryDefaultAuthentication {\n  type: 'azure-active-directory-default';\n  options: {\n    /**\n     * If you want to connect using a specific client account\n     * they need to provide `clientId` associated to their created identity.\n     *\n     * This is optional for retrieving a token\n     */\n    clientId?: string;\n  };\n}\n\n\ninterface AzureActiveDirectoryAccessTokenAuthentication {\n  type: 'azure-active-directory-access-token';\n  options: {\n    /**\n     * A user need to provide `token` which they retrived else where\n     * to forming the connection.\n     */\n    token: string;\n  };\n}\n\ninterface AzureActiveDirectoryPasswordAuthentication {\n  type: 'azure-active-directory-password';\n  options: {\n    /**\n     * A user need to provide `userName` asscoiate to their account.\n     */\n    userName: string;\n\n    /**\n     * A user need to provide `password` asscoiate to their account.\n     */\n    password: string;\n\n    /**\n     * A client id to use.\n     */\n    clientId: string;\n\n    /**\n     * Optional parameter for specific Azure tenant ID\n     */\n    tenantId: string;\n  };\n}\n\ninterface AzureActiveDirectoryServicePrincipalSecret {\n  type: 'azure-active-directory-service-principal-secret';\n  options: {\n    /**\n     * Application (`client`) ID from your registered Azure application\n     */\n    clientId: string;\n    /**\n     * The created `client secret` for this registered Azure application\n     */\n    clientSecret: string;\n    /**\n     * Directory (`tenant`) ID from your registered Azure application\n     */\n    tenantId: string;\n  };\n}\n\ninterface NtlmAuthentication {\n  type: 'ntlm';\n  options: {\n    /**\n     * User name from your windows account.\n     */\n    userName: string;\n    /**\n     * Password from your windows account.\n     */\n    password: string;\n    /**\n     * Once you set domain for ntlm authentication type, driver will connect to SQL Server using domain login.\n     *\n     * This is necessary for forming a connection using ntlm type\n     */\n    domain: string;\n  };\n}\n\ninterface DefaultAuthentication {\n  type: 'default';\n  options: {\n    /**\n     * User name to use for sql server login.\n     */\n    userName?: string | undefined;\n    /**\n     * Password to use for sql server login.\n     */\n    password?: string | undefined;\n  };\n}\n\ninterface ErrorWithCode extends Error {\n  code?: string;\n}\n\ninterface InternalConnectionConfig {\n  server: string;\n  authentication: DefaultAuthentication | NtlmAuthentication | AzureActiveDirectoryPasswordAuthentication | AzureActiveDirectoryMsiAppServiceAuthentication | AzureActiveDirectoryMsiVmAuthentication | AzureActiveDirectoryAccessTokenAuthentication | AzureActiveDirectoryServicePrincipalSecret | AzureActiveDirectoryDefaultAuthentication;\n  options: InternalConnectionOptions;\n}\n\nexport interface InternalConnectionOptions {\n  abortTransactionOnError: boolean;\n  appName: undefined | string;\n  camelCaseColumns: boolean;\n  cancelTimeout: number;\n  columnEncryptionKeyCacheTTL: number;\n  columnEncryptionSetting: boolean;\n  columnNameReplacer: undefined | ((colName: string, index: number, metadata: Metadata) => string);\n  connectionRetryInterval: number;\n  connector: undefined | (() => Promise<net.Socket>);\n  connectTimeout: number;\n  connectionIsolationLevel: typeof ISOLATION_LEVEL[keyof typeof ISOLATION_LEVEL];\n  cryptoCredentialsDetails: SecureContextOptions;\n  database: undefined | string;\n  datefirst: number;\n  dateFormat: string;\n  debug: {\n    data: boolean;\n    packet: boolean;\n    payload: boolean;\n    token: boolean;\n  };\n  enableAnsiNull: null | boolean;\n  enableAnsiNullDefault: null | boolean;\n  enableAnsiPadding: null | boolean;\n  enableAnsiWarnings: null | boolean;\n  enableArithAbort: null | boolean;\n  enableConcatNullYieldsNull: null | boolean;\n  enableCursorCloseOnCommit: null | boolean;\n  enableImplicitTransactions: null | boolean;\n  enableNumericRoundabort: null | boolean;\n  enableQuotedIdentifier: null | boolean;\n  encrypt: string | boolean;\n  encryptionKeyStoreProviders: KeyStoreProviderMap | undefined;\n  fallbackToDefaultDb: boolean;\n  instanceName: undefined | string;\n  isolationLevel: typeof ISOLATION_LEVEL[keyof typeof ISOLATION_LEVEL];\n  language: string;\n  localAddress: undefined | string;\n  maxRetriesOnTransientErrors: number;\n  multiSubnetFailover: boolean;\n  packetSize: number;\n  port: undefined | number;\n  readOnlyIntent: boolean;\n  requestTimeout: number;\n  rowCollectionOnDone: boolean;\n  rowCollectionOnRequestCompletion: boolean;\n  serverName: undefined | string;\n  serverSupportsColumnEncryption: boolean;\n  tdsVersion: string;\n  textsize: number;\n  trustedServerNameAE: string | undefined;\n  trustServerCertificate: boolean;\n  useColumnNames: boolean;\n  useUTC: boolean;\n  workstationId: undefined | string;\n  lowerCaseGuids: boolean;\n}\n\ninterface KeyStoreProviderMap {\n  [key: string]: ColumnEncryptionAzureKeyVaultProvider;\n}\n\n/**\n * @private\n */\ninterface State {\n  name: string;\n  enter?(this: Connection): void;\n  exit?(this: Connection, newState: State): void;\n  events: {\n    socketError?(this: Connection, err: Error): void;\n    connectTimeout?(this: Connection): void;\n    message?(this: Connection, message: Message): void;\n    retry?(this: Connection): void;\n    reconnect?(this: Connection): void;\n  };\n}\n\ntype Authentication = DefaultAuthentication |\n  NtlmAuthentication |\n  AzureActiveDirectoryPasswordAuthentication |\n  AzureActiveDirectoryMsiAppServiceAuthentication |\n  AzureActiveDirectoryMsiVmAuthentication |\n  AzureActiveDirectoryAccessTokenAuthentication |\n  AzureActiveDirectoryServicePrincipalSecret |\n  AzureActiveDirectoryDefaultAuthentication;\n\ntype AuthenticationType = Authentication['type'];\n\nexport interface ConnectionConfiguration {\n  /**\n   * Hostname to connect to.\n   */\n  server: string;\n  /**\n   * Configuration options for forming the connection.\n   */\n  options?: ConnectionOptions;\n  /**\n   * Authentication realted options for connection.\n   */\n  authentication?: AuthenticationOptions;\n}\n\ninterface DebugOptions {\n  /**\n   * A boolean, controlling whether [[debug]] events will be emitted with text describing packet data details\n   *\n   * (default: `false`)\n   */\n  data: boolean;\n  /**\n   * A boolean, controlling whether [[debug]] events will be emitted with text describing packet details\n   *\n   * (default: `false`)\n   */\n  packet: boolean;\n  /**\n   * A boolean, controlling whether [[debug]] events will be emitted with text describing packet payload details\n   *\n   * (default: `false`)\n   */\n  payload: boolean;\n  /**\n   * A boolean, controlling whether [[debug]] events will be emitted with text describing token stream tokens\n   *\n   * (default: `false`)\n   */\n  token: boolean;\n}\n\ninterface AuthenticationOptions {\n  /**\n   * Type of the authentication method, valid types are `default`, `ntlm`,\n   * `azure-active-directory-password`, `azure-active-directory-access-token`,\n   * `azure-active-directory-msi-vm`, `azure-active-directory-msi-app-service`,\n   * `azure-active-directory-default`\n   * or `azure-active-directory-service-principal-secret`\n   */\n  type?: AuthenticationType;\n  /**\n   * Different options for authentication types:\n   *\n   * * `default`: [[DefaultAuthentication.options]]\n   * * `ntlm` :[[NtlmAuthentication]]\n   * * `azure-active-directory-password` : [[AzureActiveDirectoryPasswordAuthentication.options]]\n   * * `azure-active-directory-access-token` : [[AzureActiveDirectoryAccessTokenAuthentication.options]]\n   * * `azure-active-directory-msi-vm` : [[AzureActiveDirectoryMsiVmAuthentication.options]]\n   * * `azure-active-directory-msi-app-service` : [[AzureActiveDirectoryMsiAppServiceAuthentication.options]]\n   * * `azure-active-directory-service-principal-secret` : [[AzureActiveDirectoryServicePrincipalSecret.options]]\n   * * `azure-active-directory-default` : [[AzureActiveDirectoryDefaultAuthentication.options]]\n   */\n  options?: any;\n}\n\nexport interface ConnectionOptions {\n  /**\n   * A boolean determining whether to rollback a transaction automatically if any error is encountered\n   * during the given transaction's execution. This sets the value for `SET XACT_ABORT` during the\n   * initial SQL phase of a connection [documentation](https://docs.microsoft.com/en-us/sql/t-sql/statements/set-xact-abort-transact-sql).\n   */\n  abortTransactionOnError?: boolean;\n\n  /**\n   * Application name used for identifying a specific application in profiling, logging or tracing tools of SQLServer.\n   *\n   * (default: `Tedious`)\n   */\n  appName?: string | undefined;\n\n  /**\n   * A boolean, controlling whether the column names returned will have the first letter converted to lower case\n   * (`true`) or not. This value is ignored if you provide a [[columnNameReplacer]].\n   *\n   * (default: `false`).\n   */\n  camelCaseColumns?: boolean;\n\n  /**\n   * The number of milliseconds before the [[Request.cancel]] (abort) of a request is considered failed\n   *\n   * (default: `5000`).\n   */\n  cancelTimeout?: number;\n\n  /**\n   * A function with parameters `(columnName, index, columnMetaData)` and returning a string. If provided,\n   * this will be called once per column per result-set. The returned value will be used instead of the SQL-provided\n   * column name on row and meta data objects. This allows you to dynamically convert between naming conventions.\n   *\n   * (default: `null`)\n   */\n  columnNameReplacer?: (colName: string, index: number, metadata: Metadata) => string;\n\n  /**\n   * Number of milliseconds before retrying to establish connection, in case of transient failure.\n   *\n   * (default:`500`)\n   */\n  connectionRetryInterval?: number;\n\n  /**\n   * Custom connector factory method.\n   *\n   * (default: `undefined`)\n   */\n  connector?: () => Promise<net.Socket>;\n\n  /**\n   * The number of milliseconds before the attempt to connect is considered failed\n   *\n   * (default: `15000`).\n   */\n  connectTimeout?: number;\n\n  /**\n   * The default isolation level for new connections. All out-of-transaction queries are executed with this setting.\n   *\n   * The isolation levels are available from `require('tedious').ISOLATION_LEVEL`.\n   * * `READ_UNCOMMITTED`\n   * * `READ_COMMITTED`\n   * * `REPEATABLE_READ`\n   * * `SERIALIZABLE`\n   * * `SNAPSHOT`\n   *\n   * (default: `READ_COMMITED`).\n   */\n  connectionIsolationLevel?: number;\n\n  /**\n   * When encryption is used, an object may be supplied that will be used\n   * for the first argument when calling [`tls.createSecurePair`](http://nodejs.org/docs/latest/api/tls.html#tls_tls_createsecurepair_credentials_isserver_requestcert_rejectunauthorized)\n   *\n   * (default: `{}`)\n   */\n  cryptoCredentialsDetails?: SecureContextOptions;\n\n  /**\n   * Database to connect to (default: dependent on server configuration).\n   */\n  database?: string | undefined;\n\n  /**\n   * Sets the first day of the week to a number from 1 through 7.\n   */\n  datefirst?: number;\n\n  /**\n   * A string representing position of month, day and year in temporal datatypes.\n   *\n   * (default: `mdy`)\n   */\n  dateFormat?: string;\n\n  debug?: DebugOptions;\n\n  /**\n   * A boolean, controls the way null values should be used during comparison operation.\n   *\n   * (default: `true`)\n   */\n  enableAnsiNull?: boolean;\n\n  /**\n   * If true, `SET ANSI_NULL_DFLT_ON ON` will be set in the initial sql. This means new columns will be\n   * nullable by default. See the [T-SQL documentation](https://msdn.microsoft.com/en-us/library/ms187375.aspx)\n   *\n   * (default: `true`).\n   */\n  enableAnsiNullDefault?: boolean;\n\n  /**\n   * A boolean, controls if padding should be applied for values shorter than the size of defined column.\n   *\n   * (default: `true`)\n   */\n  enableAnsiPadding?: boolean;\n\n  /**\n   * If true, SQL Server will follow ISO standard behavior during various error conditions. For details,\n   * see [documentation](https://docs.microsoft.com/en-us/sql/t-sql/statements/set-ansi-warnings-transact-sql)\n   *\n   * (default: `true`)\n   */\n  enableAnsiWarnings?: boolean;\n\n  /**\n   * Ends a query when an overflow or divide-by-zero error occurs during query execution.\n   * See [documentation](https://docs.microsoft.com/en-us/sql/t-sql/statements/set-arithabort-transact-sql?view=sql-server-2017)\n   * for more details.\n   *\n   * (default: `true`)\n   */\n  enableArithAbort?: boolean;\n\n  /**\n   * A boolean, determines if concatenation with NULL should result in NULL or empty string value, more details in\n   * [documentation](https://docs.microsoft.com/en-us/sql/t-sql/statements/set-concat-null-yields-null-transact-sql)\n   *\n   * (default: `true`)\n   */\n  enableConcatNullYieldsNull?: boolean;\n\n  /**\n   * A boolean, controls whether cursor should be closed, if the transaction opening it gets committed or rolled\n   * back.\n   *\n   * (default: `null`)\n   */\n  enableCursorCloseOnCommit?: boolean | null;\n\n  /**\n   * A boolean, sets the connection to either implicit or autocommit transaction mode.\n   *\n   * (default: `false`)\n   */\n  enableImplicitTransactions?: boolean;\n\n  /**\n   * If false, error is not generated during loss of precession.\n   *\n   * (default: `false`)\n   */\n  enableNumericRoundabort?: boolean;\n\n  /**\n   * If true, characters enclosed in single quotes are treated as literals and those enclosed double quotes are treated as identifiers.\n   *\n   * (default: `true`)\n   */\n  enableQuotedIdentifier?: boolean;\n\n  /**\n   * A string value that can be only set to 'strict', which indicates the usage TDS 8.0 protocol. Otherwise,\n   * a boolean determining whether or not the connection will be encrypted.\n   *\n   * (default: `true`)\n   */\n  encrypt?: string | boolean;\n\n  /**\n   * By default, if the database requested by [[database]] cannot be accessed,\n   * the connection will fail with an error. However, if [[fallbackToDefaultDb]] is\n   * set to `true`, then the user's default database will be used instead\n   *\n   * (default: `false`)\n   */\n  fallbackToDefaultDb?: boolean;\n\n  /**\n   * The instance name to connect to.\n   * The SQL Server Browser service must be running on the database server,\n   * and UDP port 1434 on the database server must be reachable.\n   *\n   * (no default)\n   *\n   * Mutually exclusive with [[port]].\n   */\n  instanceName?: string | undefined;\n\n  /**\n   * The default isolation level that transactions will be run with.\n   *\n   * The isolation levels are available from `require('tedious').ISOLATION_LEVEL`.\n   * * `READ_UNCOMMITTED`\n   * * `READ_COMMITTED`\n   * * `REPEATABLE_READ`\n   * * `SERIALIZABLE`\n   * * `SNAPSHOT`\n   *\n   * (default: `READ_COMMITED`).\n   */\n  isolationLevel?: number;\n\n  /**\n   * Specifies the language environment for the session. The session language determines the datetime formats and system messages.\n   *\n   * (default: `us_english`).\n   */\n  language?: string;\n\n  /**\n   * A string indicating which network interface (ip address) to use when connecting to SQL Server.\n   */\n  localAddress?: string | undefined;\n\n  /**\n   * A boolean determining whether to parse unique identifier type with lowercase case characters.\n   *\n   * (default: `false`).\n   */\n  lowerCaseGuids?: boolean;\n\n  /**\n   * The maximum number of connection retries for transient errors.、\n   *\n   * (default: `3`).\n   */\n  maxRetriesOnTransientErrors?: number;\n\n  /**\n   * Sets the MultiSubnetFailover = True parameter, which can help minimize the client recovery latency when failovers occur.\n   *\n   * (default: `false`).\n   */\n  multiSubnetFailover?: boolean;\n\n  /**\n   * The size of TDS packets (subject to negotiation with the server).\n   * Should be a power of 2.\n   *\n   * (default: `4096`).\n   */\n  packetSize?: number;\n\n  /**\n   * Port to connect to (default: `1433`).\n   *\n   * Mutually exclusive with [[instanceName]]\n   */\n  port?: number;\n\n  /**\n   * A boolean, determining whether the connection will request read only access from a SQL Server Availability\n   * Group. For more information, see [here](http://msdn.microsoft.com/en-us/library/hh710054.aspx \"Microsoft: Configure Read-Only Routing for an Availability Group (SQL Server)\")\n   *\n   * (default: `false`).\n   */\n  readOnlyIntent?: boolean;\n\n  /**\n   * The number of milliseconds before a request is considered failed, or `0` for no timeout.\n   *\n   * As soon as a response is received, the timeout is cleared. This means that queries that immediately return a response have ability to run longer than this timeout.\n   *\n   * (default: `15000`).\n   */\n  requestTimeout?: number;\n\n  /**\n   * A boolean, that when true will expose received rows in Requests done related events:\n   * * [[Request.Event_doneInProc]]\n   * * [[Request.Event_doneProc]]\n   * * [[Request.Event_done]]\n   *\n   * (default: `false`)\n   *\n   * Caution: If many row are received, enabling this option could result in\n   * excessive memory usage.\n   */\n  rowCollectionOnDone?: boolean;\n\n  /**\n   * A boolean, that when true will expose received rows in Requests' completion callback.See [[Request.constructor]].\n   *\n   * (default: `false`)\n   *\n   * Caution: If many row are received, enabling this option could result in\n   * excessive memory usage.\n   */\n  rowCollectionOnRequestCompletion?: boolean;\n\n  /**\n   * The version of TDS to use. If server doesn't support specified version, negotiated version is used instead.\n   *\n   * The versions are available from `require('tedious').TDS_VERSION`.\n   * * `7_1`\n   * * `7_2`\n   * * `7_3_A`\n   * * `7_3_B`\n   * * `7_4`\n   *\n   * (default: `7_4`)\n   */\n  tdsVersion?: string;\n\n  /**\n   * Specifies the size of varchar(max), nvarchar(max), varbinary(max), text, ntext, and image data returned by a SELECT statement.\n   *\n   * (default: `2147483647`)\n   */\n  textsize?: string;\n\n  /**\n   * If \"true\", the SQL Server SSL certificate is automatically trusted when the communication layer is encrypted using SSL.\n   *\n   * If \"false\", the SQL Server validates the server SSL certificate. If the server certificate validation fails,\n   * the driver raises an error and terminates the connection. Make sure the value passed to serverName exactly\n   * matches the Common Name (CN) or DNS name in the Subject Alternate Name in the server certificate for an SSL connection to succeed.\n   *\n   * (default: `true`)\n   */\n  trustServerCertificate?: boolean;\n\n  /**\n   *\n   */\n  serverName?: string;\n  /**\n   * A boolean determining whether to return rows as arrays or key-value collections.\n   *\n   * (default: `false`).\n   */\n  useColumnNames?: boolean;\n\n  /**\n   * A boolean determining whether to pass time values in UTC or local time.\n   *\n   * (default: `true`).\n   */\n  useUTC?: boolean;\n\n  /**\n   * The workstation ID (WSID) of the client, default os.hostname().\n   * Used for identifying a specific client in profiling, logging or\n   * tracing client activity in SQLServer.\n   *\n   * The value is reported by the TSQL function HOST_NAME().\n   */\n  workstationId?: string | undefined;\n}\n\n/**\n * @private\n */\nconst CLEANUP_TYPE = {\n  NORMAL: 0,\n  REDIRECT: 1,\n  RETRY: 2\n};\n\ninterface RoutingData {\n  server: string;\n  port: number;\n}\n\n/**\n * A [[Connection]] instance represents a single connection to a database server.\n *\n * ```js\n * var Connection = require('tedious').Connection;\n * var config = {\n *  \"authentication\": {\n *    ...,\n *    \"options\": {...}\n *  },\n *  \"options\": {...}\n * };\n * var connection = new Connection(config);\n * ```\n *\n * Only one request at a time may be executed on a connection. Once a [[Request]]\n * has been initiated (with [[Connection.callProcedure]], [[Connection.execSql]],\n * or [[Connection.execSqlBatch]]), another should not be initiated until the\n * [[Request]]'s completion callback is called.\n */\nclass Connection extends EventEmitter {\n  /**\n   * @private\n   */\n  fedAuthRequired: boolean;\n  /**\n   * @private\n   */\n  config: InternalConnectionConfig;\n  /**\n   * @private\n   */\n  secureContextOptions: SecureContextOptions;\n  /**\n   * @private\n   */\n  inTransaction: boolean;\n  /**\n   * @private\n   */\n  transactionDescriptors: Buffer[];\n  /**\n   * @private\n   */\n  transactionDepth: number;\n  /**\n   * @private\n   */\n  isSqlBatch: boolean;\n  /**\n   * @private\n   */\n  curTransientRetryCount: number;\n  /**\n   * @private\n   */\n  transientErrorLookup: TransientErrorLookup;\n  /**\n   * @private\n   */\n  closed: boolean;\n  /**\n   * @private\n   */\n  loginError: undefined | AggregateError | ConnectionError;\n  /**\n   * @private\n   */\n  debug: Debug;\n  /**\n   * @private\n   */\n  ntlmpacket: undefined | any;\n  /**\n   * @private\n   */\n  ntlmpacketBuffer: undefined | Buffer;\n\n  /**\n   * @private\n   */\n  declare STATE: {\n    INITIALIZED: State;\n    CONNECTING: State;\n    SENT_PRELOGIN: State;\n    REROUTING: State;\n    TRANSIENT_FAILURE_RETRY: State;\n    SENT_TLSSSLNEGOTIATION: State;\n    SENT_LOGIN7_WITH_STANDARD_LOGIN: State;\n    SENT_LOGIN7_WITH_NTLM: State;\n    SENT_LOGIN7_WITH_FEDAUTH: State;\n    LOGGED_IN_SENDING_INITIAL_SQL: State;\n    LOGGED_IN: State;\n    SENT_CLIENT_REQUEST: State;\n    SENT_ATTENTION: State;\n    FINAL: State;\n  };\n\n  /**\n   * @private\n   */\n  routingData: undefined | RoutingData;\n\n  /**\n   * @private\n   */\n  messageIo!: MessageIO;\n  /**\n   * @private\n   */\n  state: State;\n  /**\n   * @private\n   */\n  resetConnectionOnNextRequest: undefined | boolean;\n\n  /**\n   * @private\n   */\n  request: undefined | Request | BulkLoad;\n  /**\n   * @private\n   */\n  procReturnStatusValue: undefined | any;\n  /**\n   * @private\n   */\n  socket: undefined | net.Socket;\n  /**\n   * @private\n   */\n  messageBuffer: Buffer;\n\n  /**\n   * @private\n   */\n  connectTimer: undefined | NodeJS.Timeout;\n  /**\n   * @private\n   */\n  cancelTimer: undefined | NodeJS.Timeout;\n  /**\n   * @private\n   */\n  requestTimer: undefined | NodeJS.Timeout;\n  /**\n   * @private\n   */\n  retryTimer: undefined | NodeJS.Timeout;\n\n  /**\n   * @private\n   */\n  _cancelAfterRequestSent: () => void;\n\n  /**\n   * @private\n   */\n  databaseCollation: Collation | undefined;\n\n  /**\n   * Note: be aware of the different options field:\n   * 1. config.authentication.options\n   * 2. config.options\n   *\n   * ```js\n   * const { Connection } = require('tedious');\n   *\n   * const config = {\n   *  \"authentication\": {\n   *    ...,\n   *    \"options\": {...}\n   *  },\n   *  \"options\": {...}\n   * };\n   *\n   * const connection = new Connection(config);\n   * ```\n   *\n   * @param config\n   */\n  constructor(config: ConnectionConfiguration) {\n    super();\n\n    if (typeof config !== 'object' || config === null) {\n      throw new TypeError('The \"config\" argument is required and must be of type Object.');\n    }\n\n    if (typeof config.server !== 'string') {\n      throw new TypeError('The \"config.server\" property is required and must be of type string.');\n    }\n\n    this.fedAuthRequired = false;\n\n    let authentication: InternalConnectionConfig['authentication'];\n    if (config.authentication !== undefined) {\n      if (typeof config.authentication !== 'object' || config.authentication === null) {\n        throw new TypeError('The \"config.authentication\" property must be of type Object.');\n      }\n\n      const type = config.authentication.type;\n      const options = config.authentication.options === undefined ? {} : config.authentication.options;\n\n      if (typeof type !== 'string') {\n        throw new TypeError('The \"config.authentication.type\" property must be of type string.');\n      }\n\n      if (type !== 'default' && type !== 'ntlm' && type !== 'azure-active-directory-password' && type !== 'azure-active-directory-access-token' && type !== 'azure-active-directory-msi-vm' && type !== 'azure-active-directory-msi-app-service' && type !== 'azure-active-directory-service-principal-secret' && type !== 'azure-active-directory-default') {\n        throw new TypeError('The \"type\" property must one of \"default\", \"ntlm\", \"azure-active-directory-password\", \"azure-active-directory-access-token\", \"azure-active-directory-default\", \"azure-active-directory-msi-vm\" or \"azure-active-directory-msi-app-service\" or \"azure-active-directory-service-principal-secret\".');\n      }\n\n      if (typeof options !== 'object' || options === null) {\n        throw new TypeError('The \"config.authentication.options\" property must be of type object.');\n      }\n\n      if (type === 'ntlm') {\n        if (typeof options.domain !== 'string') {\n          throw new TypeError('The \"config.authentication.options.domain\" property must be of type string.');\n        }\n\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'ntlm',\n          options: {\n            userName: options.userName,\n            password: options.password,\n            domain: options.domain && options.domain.toUpperCase()\n          }\n        };\n      } else if (type === 'azure-active-directory-password') {\n        if (typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n\n        if (options.tenantId !== undefined && typeof options.tenantId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.tenantId\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-password',\n          options: {\n            userName: options.userName,\n            password: options.password,\n            tenantId: options.tenantId,\n            clientId: options.clientId\n          }\n        };\n      } else if (type === 'azure-active-directory-access-token') {\n        if (typeof options.token !== 'string') {\n          throw new TypeError('The \"config.authentication.options.token\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-access-token',\n          options: {\n            token: options.token\n          }\n        };\n      } else if (type === 'azure-active-directory-msi-vm') {\n        if (options.clientId !== undefined && typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-msi-vm',\n          options: {\n            clientId: options.clientId\n          }\n        };\n      } else if (type === 'azure-active-directory-default') {\n        if (options.clientId !== undefined && typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n        authentication = {\n          type: 'azure-active-directory-default',\n          options: {\n            clientId: options.clientId\n          }\n        };\n      } else if (type === 'azure-active-directory-msi-app-service') {\n        if (options.clientId !== undefined && typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-msi-app-service',\n          options: {\n            clientId: options.clientId\n          }\n        };\n      } else if (type === 'azure-active-directory-service-principal-secret') {\n        if (typeof options.clientId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientId\" property must be of type string.');\n        }\n\n        if (typeof options.clientSecret !== 'string') {\n          throw new TypeError('The \"config.authentication.options.clientSecret\" property must be of type string.');\n        }\n\n        if (typeof options.tenantId !== 'string') {\n          throw new TypeError('The \"config.authentication.options.tenantId\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'azure-active-directory-service-principal-secret',\n          options: {\n            clientId: options.clientId,\n            clientSecret: options.clientSecret,\n            tenantId: options.tenantId\n          }\n        };\n      } else {\n        if (options.userName !== undefined && typeof options.userName !== 'string') {\n          throw new TypeError('The \"config.authentication.options.userName\" property must be of type string.');\n        }\n\n        if (options.password !== undefined && typeof options.password !== 'string') {\n          throw new TypeError('The \"config.authentication.options.password\" property must be of type string.');\n        }\n\n        authentication = {\n          type: 'default',\n          options: {\n            userName: options.userName,\n            password: options.password\n          }\n        };\n      }\n    } else {\n      authentication = {\n        type: 'default',\n        options: {\n          userName: undefined,\n          password: undefined\n        }\n      };\n    }\n\n    this.config = {\n      server: config.server,\n      authentication: authentication,\n      options: {\n        abortTransactionOnError: false,\n        appName: undefined,\n        camelCaseColumns: false,\n        cancelTimeout: DEFAULT_CANCEL_TIMEOUT,\n        columnEncryptionKeyCacheTTL: 2 * 60 * 60 * 1000,  // Units: miliseconds\n        columnEncryptionSetting: false,\n        columnNameReplacer: undefined,\n        connectionRetryInterval: DEFAULT_CONNECT_RETRY_INTERVAL,\n        connectTimeout: DEFAULT_CONNECT_TIMEOUT,\n        connector: undefined,\n        connectionIsolationLevel: ISOLATION_LEVEL.READ_COMMITTED,\n        cryptoCredentialsDetails: {},\n        database: undefined,\n        datefirst: DEFAULT_DATEFIRST,\n        dateFormat: DEFAULT_DATEFORMAT,\n        debug: {\n          data: false,\n          packet: false,\n          payload: false,\n          token: false\n        },\n        enableAnsiNull: true,\n        enableAnsiNullDefault: true,\n        enableAnsiPadding: true,\n        enableAnsiWarnings: true,\n        enableArithAbort: true,\n        enableConcatNullYieldsNull: true,\n        enableCursorCloseOnCommit: null,\n        enableImplicitTransactions: false,\n        enableNumericRoundabort: false,\n        enableQuotedIdentifier: true,\n        encrypt: true,\n        fallbackToDefaultDb: false,\n        encryptionKeyStoreProviders: undefined,\n        instanceName: undefined,\n        isolationLevel: ISOLATION_LEVEL.READ_COMMITTED,\n        language: DEFAULT_LANGUAGE,\n        localAddress: undefined,\n        maxRetriesOnTransientErrors: 3,\n        multiSubnetFailover: false,\n        packetSize: DEFAULT_PACKET_SIZE,\n        port: DEFAULT_PORT,\n        readOnlyIntent: false,\n        requestTimeout: DEFAULT_CLIENT_REQUEST_TIMEOUT,\n        rowCollectionOnDone: false,\n        rowCollectionOnRequestCompletion: false,\n        serverName: undefined,\n        serverSupportsColumnEncryption: false,\n        tdsVersion: DEFAULT_TDS_VERSION,\n        textsize: DEFAULT_TEXTSIZE,\n        trustedServerNameAE: undefined,\n        trustServerCertificate: false,\n        useColumnNames: false,\n        useUTC: true,\n        workstationId: undefined,\n        lowerCaseGuids: false\n      }\n    };\n\n    if (config.options) {\n      if (config.options.port && config.options.instanceName) {\n        throw new Error('Port and instanceName are mutually exclusive, but ' + config.options.port + ' and ' + config.options.instanceName + ' provided');\n      }\n\n      if (config.options.abortTransactionOnError !== undefined) {\n        if (typeof config.options.abortTransactionOnError !== 'boolean' && config.options.abortTransactionOnError !== null) {\n          throw new TypeError('The \"config.options.abortTransactionOnError\" property must be of type string or null.');\n        }\n\n        this.config.options.abortTransactionOnError = config.options.abortTransactionOnError;\n      }\n\n      if (config.options.appName !== undefined) {\n        if (typeof config.options.appName !== 'string') {\n          throw new TypeError('The \"config.options.appName\" property must be of type string.');\n        }\n\n        this.config.options.appName = config.options.appName;\n      }\n\n      if (config.options.camelCaseColumns !== undefined) {\n        if (typeof config.options.camelCaseColumns !== 'boolean') {\n          throw new TypeError('The \"config.options.camelCaseColumns\" property must be of type boolean.');\n        }\n\n        this.config.options.camelCaseColumns = config.options.camelCaseColumns;\n      }\n\n      if (config.options.cancelTimeout !== undefined) {\n        if (typeof config.options.cancelTimeout !== 'number') {\n          throw new TypeError('The \"config.options.cancelTimeout\" property must be of type number.');\n        }\n\n        this.config.options.cancelTimeout = config.options.cancelTimeout;\n      }\n\n      if (config.options.columnNameReplacer) {\n        if (typeof config.options.columnNameReplacer !== 'function') {\n          throw new TypeError('The \"config.options.cancelTimeout\" property must be of type function.');\n        }\n\n        this.config.options.columnNameReplacer = config.options.columnNameReplacer;\n      }\n\n      if (config.options.connectionIsolationLevel !== undefined) {\n        assertValidIsolationLevel(config.options.connectionIsolationLevel, 'config.options.connectionIsolationLevel');\n\n        this.config.options.connectionIsolationLevel = config.options.connectionIsolationLevel;\n      }\n\n      if (config.options.connectTimeout !== undefined) {\n        if (typeof config.options.connectTimeout !== 'number') {\n          throw new TypeError('The \"config.options.connectTimeout\" property must be of type number.');\n        }\n\n        this.config.options.connectTimeout = config.options.connectTimeout;\n      }\n\n      if (config.options.connector !== undefined) {\n        if (typeof config.options.connector !== 'function') {\n          throw new TypeError('The \"config.options.connector\" property must be a function.');\n        }\n\n        this.config.options.connector = config.options.connector;\n      }\n\n      if (config.options.cryptoCredentialsDetails !== undefined) {\n        if (typeof config.options.cryptoCredentialsDetails !== 'object' || config.options.cryptoCredentialsDetails === null) {\n          throw new TypeError('The \"config.options.cryptoCredentialsDetails\" property must be of type Object.');\n        }\n\n        this.config.options.cryptoCredentialsDetails = config.options.cryptoCredentialsDetails;\n      }\n\n      if (config.options.database !== undefined) {\n        if (typeof config.options.database !== 'string') {\n          throw new TypeError('The \"config.options.database\" property must be of type string.');\n        }\n\n        this.config.options.database = config.options.database;\n      }\n\n      if (config.options.datefirst !== undefined) {\n        if (typeof config.options.datefirst !== 'number' && config.options.datefirst !== null) {\n          throw new TypeError('The \"config.options.datefirst\" property must be of type number.');\n        }\n\n        if (config.options.datefirst !== null && (config.options.datefirst < 1 || config.options.datefirst > 7)) {\n          throw new RangeError('The \"config.options.datefirst\" property must be >= 1 and <= 7');\n        }\n\n        this.config.options.datefirst = config.options.datefirst;\n      }\n\n      if (config.options.dateFormat !== undefined) {\n        if (typeof config.options.dateFormat !== 'string' && config.options.dateFormat !== null) {\n          throw new TypeError('The \"config.options.dateFormat\" property must be of type string or null.');\n        }\n\n        this.config.options.dateFormat = config.options.dateFormat;\n      }\n\n      if (config.options.debug) {\n        if (config.options.debug.data !== undefined) {\n          if (typeof config.options.debug.data !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.data\" property must be of type boolean.');\n          }\n\n          this.config.options.debug.data = config.options.debug.data;\n        }\n\n        if (config.options.debug.packet !== undefined) {\n          if (typeof config.options.debug.packet !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.packet\" property must be of type boolean.');\n          }\n\n          this.config.options.debug.packet = config.options.debug.packet;\n        }\n\n        if (config.options.debug.payload !== undefined) {\n          if (typeof config.options.debug.payload !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.payload\" property must be of type boolean.');\n          }\n\n          this.config.options.debug.payload = config.options.debug.payload;\n        }\n\n        if (config.options.debug.token !== undefined) {\n          if (typeof config.options.debug.token !== 'boolean') {\n            throw new TypeError('The \"config.options.debug.token\" property must be of type boolean.');\n          }\n\n          this.config.options.debug.token = config.options.debug.token;\n        }\n      }\n\n      if (config.options.enableAnsiNull !== undefined) {\n        if (typeof config.options.enableAnsiNull !== 'boolean' && config.options.enableAnsiNull !== null) {\n          throw new TypeError('The \"config.options.enableAnsiNull\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableAnsiNull = config.options.enableAnsiNull;\n      }\n\n      if (config.options.enableAnsiNullDefault !== undefined) {\n        if (typeof config.options.enableAnsiNullDefault !== 'boolean' && config.options.enableAnsiNullDefault !== null) {\n          throw new TypeError('The \"config.options.enableAnsiNullDefault\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableAnsiNullDefault = config.options.enableAnsiNullDefault;\n      }\n\n      if (config.options.enableAnsiPadding !== undefined) {\n        if (typeof config.options.enableAnsiPadding !== 'boolean' && config.options.enableAnsiPadding !== null) {\n          throw new TypeError('The \"config.options.enableAnsiPadding\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableAnsiPadding = config.options.enableAnsiPadding;\n      }\n\n      if (config.options.enableAnsiWarnings !== undefined) {\n        if (typeof config.options.enableAnsiWarnings !== 'boolean' && config.options.enableAnsiWarnings !== null) {\n          throw new TypeError('The \"config.options.enableAnsiWarnings\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableAnsiWarnings = config.options.enableAnsiWarnings;\n      }\n\n      if (config.options.enableArithAbort !== undefined) {\n        if (typeof config.options.enableArithAbort !== 'boolean' && config.options.enableArithAbort !== null) {\n          throw new TypeError('The \"config.options.enableArithAbort\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableArithAbort = config.options.enableArithAbort;\n      }\n\n      if (config.options.enableConcatNullYieldsNull !== undefined) {\n        if (typeof config.options.enableConcatNullYieldsNull !== 'boolean' && config.options.enableConcatNullYieldsNull !== null) {\n          throw new TypeError('The \"config.options.enableConcatNullYieldsNull\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableConcatNullYieldsNull = config.options.enableConcatNullYieldsNull;\n      }\n\n      if (config.options.enableCursorCloseOnCommit !== undefined) {\n        if (typeof config.options.enableCursorCloseOnCommit !== 'boolean' && config.options.enableCursorCloseOnCommit !== null) {\n          throw new TypeError('The \"config.options.enableCursorCloseOnCommit\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableCursorCloseOnCommit = config.options.enableCursorCloseOnCommit;\n      }\n\n      if (config.options.enableImplicitTransactions !== undefined) {\n        if (typeof config.options.enableImplicitTransactions !== 'boolean' && config.options.enableImplicitTransactions !== null) {\n          throw new TypeError('The \"config.options.enableImplicitTransactions\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableImplicitTransactions = config.options.enableImplicitTransactions;\n      }\n\n      if (config.options.enableNumericRoundabort !== undefined) {\n        if (typeof config.options.enableNumericRoundabort !== 'boolean' && config.options.enableNumericRoundabort !== null) {\n          throw new TypeError('The \"config.options.enableNumericRoundabort\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableNumericRoundabort = config.options.enableNumericRoundabort;\n      }\n\n      if (config.options.enableQuotedIdentifier !== undefined) {\n        if (typeof config.options.enableQuotedIdentifier !== 'boolean' && config.options.enableQuotedIdentifier !== null) {\n          throw new TypeError('The \"config.options.enableQuotedIdentifier\" property must be of type boolean or null.');\n        }\n\n        this.config.options.enableQuotedIdentifier = config.options.enableQuotedIdentifier;\n      }\n      if (config.options.encrypt !== undefined) {\n        if (typeof config.options.encrypt !== 'boolean') {\n          if (config.options.encrypt !== 'strict') {\n            throw new TypeError('The \"encrypt\" property must be set to \"strict\", or of type boolean.');\n          }\n        }\n\n        this.config.options.encrypt = config.options.encrypt;\n      }\n\n      if (config.options.fallbackToDefaultDb !== undefined) {\n        if (typeof config.options.fallbackToDefaultDb !== 'boolean') {\n          throw new TypeError('The \"config.options.fallbackToDefaultDb\" property must be of type boolean.');\n        }\n\n        this.config.options.fallbackToDefaultDb = config.options.fallbackToDefaultDb;\n      }\n\n      if (config.options.instanceName !== undefined) {\n        if (typeof config.options.instanceName !== 'string') {\n          throw new TypeError('The \"config.options.instanceName\" property must be of type string.');\n        }\n\n        this.config.options.instanceName = config.options.instanceName;\n        this.config.options.port = undefined;\n      }\n\n      if (config.options.isolationLevel !== undefined) {\n        assertValidIsolationLevel(config.options.isolationLevel, 'config.options.isolationLevel');\n\n        this.config.options.isolationLevel = config.options.isolationLevel;\n      }\n\n      if (config.options.language !== undefined) {\n        if (typeof config.options.language !== 'string' && config.options.language !== null) {\n          throw new TypeError('The \"config.options.language\" property must be of type string or null.');\n        }\n\n        this.config.options.language = config.options.language;\n      }\n\n      if (config.options.localAddress !== undefined) {\n        if (typeof config.options.localAddress !== 'string') {\n          throw new TypeError('The \"config.options.localAddress\" property must be of type string.');\n        }\n\n        this.config.options.localAddress = config.options.localAddress;\n      }\n\n      if (config.options.multiSubnetFailover !== undefined) {\n        if (typeof config.options.multiSubnetFailover !== 'boolean') {\n          throw new TypeError('The \"config.options.multiSubnetFailover\" property must be of type boolean.');\n        }\n\n        this.config.options.multiSubnetFailover = config.options.multiSubnetFailover;\n      }\n\n      if (config.options.packetSize !== undefined) {\n        if (typeof config.options.packetSize !== 'number') {\n          throw new TypeError('The \"config.options.packetSize\" property must be of type number.');\n        }\n\n        this.config.options.packetSize = config.options.packetSize;\n      }\n\n      if (config.options.port !== undefined) {\n        if (typeof config.options.port !== 'number') {\n          throw new TypeError('The \"config.options.port\" property must be of type number.');\n        }\n\n        if (config.options.port <= 0 || config.options.port >= 65536) {\n          throw new RangeError('The \"config.options.port\" property must be > 0 and < 65536');\n        }\n\n        this.config.options.port = config.options.port;\n        this.config.options.instanceName = undefined;\n      }\n\n      if (config.options.readOnlyIntent !== undefined) {\n        if (typeof config.options.readOnlyIntent !== 'boolean') {\n          throw new TypeError('The \"config.options.readOnlyIntent\" property must be of type boolean.');\n        }\n\n        this.config.options.readOnlyIntent = config.options.readOnlyIntent;\n      }\n\n      if (config.options.requestTimeout !== undefined) {\n        if (typeof config.options.requestTimeout !== 'number') {\n          throw new TypeError('The \"config.options.requestTimeout\" property must be of type number.');\n        }\n\n        this.config.options.requestTimeout = config.options.requestTimeout;\n      }\n\n      if (config.options.maxRetriesOnTransientErrors !== undefined) {\n        if (typeof config.options.maxRetriesOnTransientErrors !== 'number') {\n          throw new TypeError('The \"config.options.maxRetriesOnTransientErrors\" property must be of type number.');\n        }\n\n        if (config.options.maxRetriesOnTransientErrors < 0) {\n          throw new TypeError('The \"config.options.maxRetriesOnTransientErrors\" property must be equal or greater than 0.');\n        }\n\n        this.config.options.maxRetriesOnTransientErrors = config.options.maxRetriesOnTransientErrors;\n      }\n\n      if (config.options.connectionRetryInterval !== undefined) {\n        if (typeof config.options.connectionRetryInterval !== 'number') {\n          throw new TypeError('The \"config.options.connectionRetryInterval\" property must be of type number.');\n        }\n\n        if (config.options.connectionRetryInterval <= 0) {\n          throw new TypeError('The \"config.options.connectionRetryInterval\" property must be greater than 0.');\n        }\n\n        this.config.options.connectionRetryInterval = config.options.connectionRetryInterval;\n      }\n\n      if (config.options.rowCollectionOnDone !== undefined) {\n        if (typeof config.options.rowCollectionOnDone !== 'boolean') {\n          throw new TypeError('The \"config.options.rowCollectionOnDone\" property must be of type boolean.');\n        }\n\n        this.config.options.rowCollectionOnDone = config.options.rowCollectionOnDone;\n      }\n\n      if (config.options.rowCollectionOnRequestCompletion !== undefined) {\n        if (typeof config.options.rowCollectionOnRequestCompletion !== 'boolean') {\n          throw new TypeError('The \"config.options.rowCollectionOnRequestCompletion\" property must be of type boolean.');\n        }\n\n        this.config.options.rowCollectionOnRequestCompletion = config.options.rowCollectionOnRequestCompletion;\n      }\n\n      if (config.options.tdsVersion !== undefined) {\n        if (typeof config.options.tdsVersion !== 'string') {\n          throw new TypeError('The \"config.options.tdsVersion\" property must be of type string.');\n        }\n\n        this.config.options.tdsVersion = config.options.tdsVersion;\n      }\n\n      if (config.options.textsize !== undefined) {\n        if (typeof config.options.textsize !== 'number' && config.options.textsize !== null) {\n          throw new TypeError('The \"config.options.textsize\" property must be of type number or null.');\n        }\n\n        if (config.options.textsize > 2147483647) {\n          throw new TypeError('The \"config.options.textsize\" can\\'t be greater than 2147483647.');\n        } else if (config.options.textsize < -1) {\n          throw new TypeError('The \"config.options.textsize\" can\\'t be smaller than -1.');\n        }\n\n        this.config.options.textsize = config.options.textsize | 0;\n      }\n\n      if (config.options.trustServerCertificate !== undefined) {\n        if (typeof config.options.trustServerCertificate !== 'boolean') {\n          throw new TypeError('The \"config.options.trustServerCertificate\" property must be of type boolean.');\n        }\n\n        this.config.options.trustServerCertificate = config.options.trustServerCertificate;\n      }\n\n      if (config.options.serverName !== undefined) {\n        if (typeof config.options.serverName !== 'string') {\n          throw new TypeError('The \"config.options.serverName\" property must be of type string.');\n        }\n        this.config.options.serverName = config.options.serverName;\n      }\n\n      if (config.options.useColumnNames !== undefined) {\n        if (typeof config.options.useColumnNames !== 'boolean') {\n          throw new TypeError('The \"config.options.useColumnNames\" property must be of type boolean.');\n        }\n\n        this.config.options.useColumnNames = config.options.useColumnNames;\n      }\n\n      if (config.options.useUTC !== undefined) {\n        if (typeof config.options.useUTC !== 'boolean') {\n          throw new TypeError('The \"config.options.useUTC\" property must be of type boolean.');\n        }\n\n        this.config.options.useUTC = config.options.useUTC;\n      }\n\n      if (config.options.workstationId !== undefined) {\n        if (typeof config.options.workstationId !== 'string') {\n          throw new TypeError('The \"config.options.workstationId\" property must be of type string.');\n        }\n\n        this.config.options.workstationId = config.options.workstationId;\n      }\n\n      if (config.options.lowerCaseGuids !== undefined) {\n        if (typeof config.options.lowerCaseGuids !== 'boolean') {\n          throw new TypeError('The \"config.options.lowerCaseGuids\" property must be of type boolean.');\n        }\n\n        this.config.options.lowerCaseGuids = config.options.lowerCaseGuids;\n      }\n    }\n\n    this.secureContextOptions = this.config.options.cryptoCredentialsDetails;\n    if (this.secureContextOptions.secureOptions === undefined) {\n      // If the caller has not specified their own `secureOptions`,\n      // we set `SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS` here.\n      // Older SQL Server instances running on older Windows versions have\n      // trouble with the BEAST workaround in OpenSSL.\n      // As BEAST is a browser specific exploit, we can just disable this option here.\n      this.secureContextOptions = Object.create(this.secureContextOptions, {\n        secureOptions: {\n          value: constants.SSL_OP_DONT_INSERT_EMPTY_FRAGMENTS\n        }\n      });\n    }\n\n    this.debug = this.createDebug();\n    this.inTransaction = false;\n    this.transactionDescriptors = [Buffer.from([0, 0, 0, 0, 0, 0, 0, 0])];\n\n    // 'beginTransaction', 'commitTransaction' and 'rollbackTransaction'\n    // events are utilized to maintain inTransaction property state which in\n    // turn is used in managing transactions. These events are only fired for\n    // TDS version 7.2 and beyond. The properties below are used to emulate\n    // equivalent behavior for TDS versions before 7.2.\n    this.transactionDepth = 0;\n    this.isSqlBatch = false;\n    this.closed = false;\n    this.messageBuffer = Buffer.alloc(0);\n\n    this.curTransientRetryCount = 0;\n    this.transientErrorLookup = new TransientErrorLookup();\n\n    this.state = this.STATE.INITIALIZED;\n\n    this._cancelAfterRequestSent = () => {\n      this.messageIo.sendMessage(TYPE.ATTENTION);\n      this.createCancelTimer();\n    };\n  }\n\n  connect(connectListener?: (err?: Error) => void) {\n    if (this.state !== this.STATE.INITIALIZED) {\n      throw new ConnectionError('`.connect` can not be called on a Connection in `' + this.state.name + '` state.');\n    }\n\n    if (connectListener) {\n      const onConnect = (err?: Error) => {\n        this.removeListener('error', onError);\n        connectListener(err);\n      };\n\n      const onError = (err: Error) => {\n        this.removeListener('connect', onConnect);\n        connectListener(err);\n      };\n\n      this.once('connect', onConnect);\n      this.once('error', onError);\n    }\n\n    this.transitionTo(this.STATE.CONNECTING);\n  }\n\n  /**\n   * The server has reported that the charset has changed.\n   */\n  on(event: 'charsetChange', listener: (charset: string) => void): this\n\n  /**\n   * The attempt to connect and validate has completed.\n   */\n  on(\n    event: 'connect',\n    /**\n     * @param err If successfully connected, will be falsey. If there was a\n     *   problem (with either connecting or validation), will be an [[Error]] object.\n     */\n    listener: (err: Error | undefined) => void\n  ): this\n\n  /**\n   * The server has reported that the active database has changed.\n   * This may be as a result of a successful login, or a `use` statement.\n   */\n  on(event: 'databaseChange', listener: (databaseName: string) => void): this\n\n  /**\n   * A debug message is available. It may be logged or ignored.\n   */\n  on(event: 'debug', listener: (messageText: string) => void): this\n\n  /**\n   * Internal error occurs.\n   */\n  on(event: 'error', listener: (err: Error) => void): this\n\n  /**\n   * The server has issued an error message.\n   */\n  on(event: 'errorMessage', listener: (message: import('./token/token').ErrorMessageToken) => void): this\n\n  /**\n   * The connection has ended.\n   *\n   * This may be as a result of the client calling [[close]], the server\n   * closing the connection, or a network error.\n   */\n  on(event: 'end', listener: () => void): this\n\n  /**\n   * The server has issued an information message.\n   */\n  on(event: 'infoMessage', listener: (message: import('./token/token').InfoMessageToken) => void): this\n\n  /**\n   * The server has reported that the language has changed.\n   */\n  on(event: 'languageChange', listener: (languageName: string) => void): this\n\n  /**\n   * The connection was reset.\n   */\n  on(event: 'resetConnection', listener: () => void): this\n\n  /**\n   * A secure connection has been established.\n   */\n  on(event: 'secure', listener: (cleartext: import('tls').TLSSocket) => void): this\n\n  on(event: string | symbol, listener: (...args: any[]) => void) {\n    return super.on(event, listener);\n  }\n\n  /**\n   * @private\n   */\n  emit(event: 'charsetChange', charset: string): boolean\n  /**\n   * @private\n   */\n  emit(event: 'connect', error?: Error): boolean\n  /**\n   * @private\n   */\n  emit(event: 'databaseChange', databaseName: string): boolean\n  /**\n   * @private\n   */\n  emit(event: 'debug', messageText: string): boolean\n  /**\n   * @private\n   */\n  emit(event: 'error', error: Error): boolean\n  /**\n   * @private\n   */\n  emit(event: 'errorMessage', message: import('./token/token').ErrorMessageToken): boolean\n  /**\n   * @private\n   */\n  emit(event: 'end'): boolean\n  /**\n   * @private\n   */\n  emit(event: 'infoMessage', message: import('./token/token').InfoMessageToken): boolean\n  /**\n   * @private\n   */\n  emit(event: 'languageChange', languageName: string): boolean\n  /**\n   * @private\n   */\n  emit(event: 'secure', cleartext: import('tls').TLSSocket): boolean\n  /**\n   * @private\n   */\n  emit(event: 'rerouting'): boolean\n  /**\n   * @private\n   */\n  emit(event: 'resetConnection'): boolean\n  /**\n   * @private\n   */\n  emit(event: 'retry'): boolean\n  /**\n   * @private\n   */\n  emit(event: 'rollbackTransaction'): boolean\n\n  emit(event: string | symbol, ...args: any[]) {\n    return super.emit(event, ...args);\n  }\n\n  /**\n   * Closes the connection to the database.\n   *\n   * The [[Event_end]] will be emitted once the connection has been closed.\n   */\n  close() {\n    this.transitionTo(this.STATE.FINAL);\n  }\n\n  /**\n   * @private\n   */\n  initialiseConnection() {\n    const signal = this.createConnectTimer();\n\n    if (this.config.options.port) {\n      return this.connectOnPort(this.config.options.port, this.config.options.multiSubnetFailover, signal, this.config.options.connector);\n    } else {\n      return instanceLookup({\n        server: this.config.server,\n        instanceName: this.config.options.instanceName!,\n        timeout: this.config.options.connectTimeout,\n        signal: signal\n      }).then((port) => {\n        process.nextTick(() => {\n          this.connectOnPort(port, this.config.options.multiSubnetFailover, signal, this.config.options.connector);\n        });\n      }, (err) => {\n        this.clearConnectTimer();\n\n        if (signal.aborted) {\n          // Ignore the AbortError for now, this is still handled by the connectTimer firing\n          return;\n        }\n\n        process.nextTick(() => {\n          this.emit('connect', new ConnectionError(err.message, 'EINSTLOOKUP'));\n        });\n      });\n    }\n  }\n\n  /**\n   * @private\n   */\n  cleanupConnection(cleanupType: typeof CLEANUP_TYPE[keyof typeof CLEANUP_TYPE]) {\n    if (!this.closed) {\n      this.clearConnectTimer();\n      this.clearRequestTimer();\n      this.clearRetryTimer();\n      this.closeConnection();\n      if (cleanupType === CLEANUP_TYPE.REDIRECT) {\n        this.emit('rerouting');\n      } else if (cleanupType !== CLEANUP_TYPE.RETRY) {\n        process.nextTick(() => {\n          this.emit('end');\n        });\n      }\n\n      const request = this.request;\n      if (request) {\n        const err = new RequestError('Connection closed before request completed.', 'ECLOSE');\n        request.callback(err);\n        this.request = undefined;\n      }\n\n      this.closed = true;\n      this.loginError = undefined;\n    }\n  }\n\n  /**\n   * @private\n   */\n  createDebug() {\n    const debug = new Debug(this.config.options.debug);\n    debug.on('debug', (message) => {\n      this.emit('debug', message);\n    });\n    return debug;\n  }\n\n  /**\n   * @private\n   */\n  createTokenStreamParser(message: Message, handler: TokenHandler) {\n    return new TokenStreamParser(message, this.debug, handler, this.config.options);\n  }\n\n  socketHandlingForSendPreLogin(socket: net.Socket) {\n    socket.on('error', (error) => { this.socketError(error); });\n    socket.on('close', () => { this.socketClose(); });\n    socket.on('end', () => { this.socketEnd(); });\n    socket.setKeepAlive(true, KEEP_ALIVE_INITIAL_DELAY);\n\n    this.messageIo = new MessageIO(socket, this.config.options.packetSize, this.debug);\n    this.messageIo.on('secure', (cleartext) => { this.emit('secure', cleartext); });\n\n    this.socket = socket;\n\n    this.closed = false;\n    this.debug.log('connected to ' + this.config.server + ':' + this.config.options.port);\n\n    this.sendPreLogin();\n    this.transitionTo(this.STATE.SENT_PRELOGIN);\n  }\n\n  wrapWithTls(socket: net.Socket, signal: AbortSignal): Promise<tls.TLSSocket> {\n    signal.throwIfAborted();\n\n    return new Promise((resolve, reject) => {\n      const secureContext = tls.createSecureContext(this.secureContextOptions);\n      // If connect to an ip address directly,\n      // need to set the servername to an empty string\n      // if the user has not given a servername explicitly\n      const serverName = !net.isIP(this.config.server) ? this.config.server : '';\n      const encryptOptions = {\n        host: this.config.server,\n        socket: socket,\n        ALPNProtocols: ['tds/8.0'],\n        secureContext: secureContext,\n        servername: this.config.options.serverName ? this.config.options.serverName : serverName,\n      };\n\n      const encryptsocket = tls.connect(encryptOptions);\n\n      const onAbort = () => {\n        encryptsocket.removeListener('error', onError);\n        encryptsocket.removeListener('connect', onConnect);\n\n        encryptsocket.destroy();\n\n        reject(signal.reason);\n      };\n\n      const onError = (err: Error) => {\n        signal.removeEventListener('abort', onAbort);\n\n        encryptsocket.removeListener('error', onError);\n        encryptsocket.removeListener('connect', onConnect);\n\n        encryptsocket.destroy();\n\n        reject(err);\n      };\n\n      const onConnect = () => {\n        signal.removeEventListener('abort', onAbort);\n\n        encryptsocket.removeListener('error', onError);\n        encryptsocket.removeListener('connect', onConnect);\n\n        resolve(encryptsocket);\n      };\n\n      signal.addEventListener('abort', onAbort, { once: true });\n\n      encryptsocket.on('error', onError);\n      encryptsocket.on('secureConnect', onConnect);\n    });\n  }\n\n  connectOnPort(port: number, multiSubnetFailover: boolean, signal: AbortSignal, customConnector?: () => Promise<net.Socket>) {\n    const connectOpts = {\n      host: this.routingData ? this.routingData.server : this.config.server,\n      port: this.routingData ? this.routingData.port : port,\n      localAddress: this.config.options.localAddress\n    };\n\n    const connect = customConnector || (multiSubnetFailover ? connectInParallel : connectInSequence);\n\n    (async () => {\n      let socket = await connect(connectOpts, dns.lookup, signal);\n\n      if (this.config.options.encrypt === 'strict') {\n        try {\n          // Wrap the socket with TLS for TDS 8.0\n          socket = await this.wrapWithTls(socket, signal);\n        } catch (err) {\n          socket.end();\n\n          throw err;\n        }\n      }\n\n      this.socketHandlingForSendPreLogin(socket);\n    })().catch((err) => {\n      this.clearConnectTimer();\n\n      if (signal.aborted) {\n        return;\n      }\n\n      process.nextTick(() => { this.socketError(err); });\n    });\n  }\n\n  /**\n   * @private\n   */\n  closeConnection() {\n    if (this.socket) {\n      this.socket.destroy();\n    }\n  }\n\n  /**\n   * @private\n   */\n  createConnectTimer() {\n    const controller = new AbortController();\n    this.connectTimer = setTimeout(() => {\n      controller.abort();\n      this.connectTimeout();\n    }, this.config.options.connectTimeout);\n    return controller.signal;\n  }\n\n  /**\n   * @private\n   */\n  createCancelTimer() {\n    this.clearCancelTimer();\n    const timeout = this.config.options.cancelTimeout;\n    if (timeout > 0) {\n      this.cancelTimer = setTimeout(() => {\n        this.cancelTimeout();\n      }, timeout);\n    }\n  }\n\n  /**\n   * @private\n   */\n  createRequestTimer() {\n    this.clearRequestTimer(); // release old timer, just to be safe\n    const request = this.request as Request;\n    const timeout = (request.timeout !== undefined) ? request.timeout : this.config.options.requestTimeout;\n    if (timeout) {\n      this.requestTimer = setTimeout(() => {\n        this.requestTimeout();\n      }, timeout);\n    }\n  }\n\n  /**\n   * @private\n   */\n  createRetryTimer() {\n    this.clearRetryTimer();\n    this.retryTimer = setTimeout(() => {\n      this.retryTimeout();\n    }, this.config.options.connectionRetryInterval);\n  }\n\n  /**\n   * @private\n   */\n  connectTimeout() {\n    const hostPostfix = this.config.options.port ? `:${this.config.options.port}` : `\\\\${this.config.options.instanceName}`;\n    // If we have routing data stored, this connection has been redirected\n    const server = this.routingData ? this.routingData.server : this.config.server;\n    const port = this.routingData ? `:${this.routingData.port}` : hostPostfix;\n    // Grab the target host from the connection configration, and from a redirect message\n    // otherwise, leave the message empty.\n    const routingMessage = this.routingData ? ` (redirected from ${this.config.server}${hostPostfix})` : '';\n    const message = `Failed to connect to ${server}${port}${routingMessage} in ${this.config.options.connectTimeout}ms`;\n    this.debug.log(message);\n    this.emit('connect', new ConnectionError(message, 'ETIMEOUT'));\n    this.connectTimer = undefined;\n    this.dispatchEvent('connectTimeout');\n  }\n\n  /**\n   * @private\n   */\n  cancelTimeout() {\n    const message = `Failed to cancel request in ${this.config.options.cancelTimeout}ms`;\n    this.debug.log(message);\n    this.dispatchEvent('socketError', new ConnectionError(message, 'ETIMEOUT'));\n  }\n\n  /**\n   * @private\n   */\n  requestTimeout() {\n    this.requestTimer = undefined;\n    const request = this.request!;\n    request.cancel();\n    const timeout = (request.timeout !== undefined) ? request.timeout : this.config.options.requestTimeout;\n    const message = 'Timeout: Request failed to complete in ' + timeout + 'ms';\n    request.error = new RequestError(message, 'ETIMEOUT');\n  }\n\n  /**\n   * @private\n   */\n  retryTimeout() {\n    this.retryTimer = undefined;\n    this.emit('retry');\n    this.transitionTo(this.STATE.CONNECTING);\n  }\n\n  /**\n   * @private\n   */\n  clearConnectTimer() {\n    if (this.connectTimer) {\n      clearTimeout(this.connectTimer);\n      this.connectTimer = undefined;\n    }\n  }\n\n  /**\n   * @private\n   */\n  clearCancelTimer() {\n    if (this.cancelTimer) {\n      clearTimeout(this.cancelTimer);\n      this.cancelTimer = undefined;\n    }\n  }\n\n  /**\n   * @private\n   */\n  clearRequestTimer() {\n    if (this.requestTimer) {\n      clearTimeout(this.requestTimer);\n      this.requestTimer = undefined;\n    }\n  }\n\n  /**\n   * @private\n   */\n  clearRetryTimer() {\n    if (this.retryTimer) {\n      clearTimeout(this.retryTimer);\n      this.retryTimer = undefined;\n    }\n  }\n\n  /**\n   * @private\n   */\n  transitionTo(newState: State) {\n    if (this.state === newState) {\n      this.debug.log('State is already ' + newState.name);\n      return;\n    }\n\n    if (this.state && this.state.exit) {\n      this.state.exit.call(this, newState);\n    }\n\n    this.debug.log('State change: ' + (this.state ? this.state.name : 'undefined') + ' -> ' + newState.name);\n    this.state = newState;\n\n    if (this.state.enter) {\n      this.state.enter.apply(this);\n    }\n  }\n\n  /**\n   * @private\n   */\n  getEventHandler<T extends keyof State['events']>(eventName: T): NonNullable<State['events'][T]> {\n    const handler = this.state.events[eventName];\n\n    if (!handler) {\n      throw new Error(`No event '${eventName}' in state '${this.state.name}'`);\n    }\n\n    return handler!;\n  }\n\n  /**\n   * @private\n   */\n  dispatchEvent<T extends keyof State['events']>(eventName: T, ...args: Parameters<NonNullable<State['events'][T]>>) {\n    const handler = this.state.events[eventName] as ((this: Connection, ...args: any[]) => void) | undefined;\n    if (handler) {\n      handler.apply(this, args);\n    } else {\n      this.emit('error', new Error(`No event '${eventName}' in state '${this.state.name}'`));\n      this.close();\n    }\n  }\n\n  /**\n   * @private\n   */\n  socketError(error: Error) {\n    if (this.state === this.STATE.CONNECTING || this.state === this.STATE.SENT_TLSSSLNEGOTIATION) {\n      const hostPostfix = this.config.options.port ? `:${this.config.options.port}` : `\\\\${this.config.options.instanceName}`;\n      // If we have routing data stored, this connection has been redirected\n      const server = this.routingData ? this.routingData.server : this.config.server;\n      const port = this.routingData ? `:${this.routingData.port}` : hostPostfix;\n      // Grab the target host from the connection configration, and from a redirect message\n      // otherwise, leave the message empty.\n      const routingMessage = this.routingData ? ` (redirected from ${this.config.server}${hostPostfix})` : '';\n      const message = `Failed to connect to ${server}${port}${routingMessage} - ${error.message}`;\n      this.debug.log(message);\n      this.emit('connect', new ConnectionError(message, 'ESOCKET'));\n    } else {\n      const message = `Connection lost - ${error.message}`;\n      this.debug.log(message);\n      this.emit('error', new ConnectionError(message, 'ESOCKET'));\n    }\n    this.dispatchEvent('socketError', error);\n  }\n\n  /**\n   * @private\n   */\n  socketEnd() {\n    this.debug.log('socket ended');\n    if (this.state !== this.STATE.FINAL) {\n      const error: ErrorWithCode = new Error('socket hang up');\n      error.code = 'ECONNRESET';\n      this.socketError(error);\n    }\n  }\n\n  /**\n   * @private\n   */\n  socketClose() {\n    this.debug.log('connection to ' + this.config.server + ':' + this.config.options.port + ' closed');\n    if (this.state === this.STATE.REROUTING) {\n      this.debug.log('Rerouting to ' + this.routingData!.server + ':' + this.routingData!.port);\n\n      this.dispatchEvent('reconnect');\n    } else if (this.state === this.STATE.TRANSIENT_FAILURE_RETRY) {\n      const server = this.routingData ? this.routingData.server : this.config.server;\n      const port = this.routingData ? this.routingData.port : this.config.options.port;\n      this.debug.log('Retry after transient failure connecting to ' + server + ':' + port);\n\n      this.dispatchEvent('retry');\n    } else {\n      this.transitionTo(this.STATE.FINAL);\n    }\n  }\n\n  /**\n   * @private\n   */\n  sendPreLogin() {\n    const [, major, minor, build] = /^(\\d+)\\.(\\d+)\\.(\\d+)/.exec(version) ?? ['0.0.0', '0', '0', '0'];\n    const payload = new PreloginPayload({\n      // If encrypt setting is set to 'strict', then we should have already done the encryption before calling\n      // this function. Therefore, the encrypt will be set to false here.\n      // Otherwise, we will set encrypt here based on the encrypt Boolean value from the configuration.\n      encrypt: typeof this.config.options.encrypt === 'boolean' && this.config.options.encrypt,\n      version: { major: Number(major), minor: Number(minor), build: Number(build), subbuild: 0 }\n    });\n\n    this.messageIo.sendMessage(TYPE.PRELOGIN, payload.data);\n    this.debug.payload(function() {\n      return payload.toString('  ');\n    });\n  }\n\n  /**\n   * @private\n   */\n  sendLogin7Packet() {\n    const payload = new Login7Payload({\n      tdsVersion: versions[this.config.options.tdsVersion],\n      packetSize: this.config.options.packetSize,\n      clientProgVer: 0,\n      clientPid: process.pid,\n      connectionId: 0,\n      clientTimeZone: new Date().getTimezoneOffset(),\n      clientLcid: 0x00000409\n    });\n\n    const { authentication } = this.config;\n    switch (authentication.type) {\n      case 'azure-active-directory-password':\n        payload.fedAuth = {\n          type: 'ADAL',\n          echo: this.fedAuthRequired,\n          workflow: 'default'\n        };\n        break;\n\n      case 'azure-active-directory-access-token':\n        payload.fedAuth = {\n          type: 'SECURITYTOKEN',\n          echo: this.fedAuthRequired,\n          fedAuthToken: authentication.options.token\n        };\n        break;\n\n      case 'azure-active-directory-msi-vm':\n      case 'azure-active-directory-default':\n      case 'azure-active-directory-msi-app-service':\n      case 'azure-active-directory-service-principal-secret':\n        payload.fedAuth = {\n          type: 'ADAL',\n          echo: this.fedAuthRequired,\n          workflow: 'integrated'\n        };\n        break;\n\n      case 'ntlm':\n        payload.sspi = createNTLMRequest({ domain: authentication.options.domain });\n        break;\n\n      default:\n        payload.userName = authentication.options.userName;\n        payload.password = authentication.options.password;\n    }\n\n    payload.hostname = this.config.options.workstationId || os.hostname();\n    payload.serverName = this.routingData ? this.routingData.server : this.config.server;\n    payload.appName = this.config.options.appName || 'Tedious';\n    payload.libraryName = libraryName;\n    payload.language = this.config.options.language;\n    payload.database = this.config.options.database;\n    payload.clientId = Buffer.from([1, 2, 3, 4, 5, 6]);\n\n    payload.readOnlyIntent = this.config.options.readOnlyIntent;\n    payload.initDbFatal = !this.config.options.fallbackToDefaultDb;\n\n    this.routingData = undefined;\n    this.messageIo.sendMessage(TYPE.LOGIN7, payload.toBuffer());\n\n    this.debug.payload(function() {\n      return payload.toString('  ');\n    });\n  }\n\n  /**\n   * @private\n   */\n  sendFedAuthTokenMessage(token: string) {\n    const accessTokenLen = Buffer.byteLength(token, 'ucs2');\n    const data = Buffer.alloc(8 + accessTokenLen);\n    let offset = 0;\n    offset = data.writeUInt32LE(accessTokenLen + 4, offset);\n    offset = data.writeUInt32LE(accessTokenLen, offset);\n    data.write(token, offset, 'ucs2');\n    this.messageIo.sendMessage(TYPE.FEDAUTH_TOKEN, data);\n    // sent the fedAuth token message, the rest is similar to standard login 7\n    this.transitionTo(this.STATE.SENT_LOGIN7_WITH_STANDARD_LOGIN);\n  }\n\n  /**\n   * @private\n   */\n  sendInitialSql() {\n    const payload = new SqlBatchPayload(this.getInitialSql(), this.currentTransactionDescriptor(), this.config.options);\n\n    const message = new Message({ type: TYPE.SQL_BATCH });\n    this.messageIo.outgoingMessageStream.write(message);\n    Readable.from(payload).pipe(message);\n  }\n\n  /**\n   * @private\n   */\n  getInitialSql() {\n    const options = [];\n\n    if (this.config.options.enableAnsiNull === true) {\n      options.push('set ansi_nulls on');\n    } else if (this.config.options.enableAnsiNull === false) {\n      options.push('set ansi_nulls off');\n    }\n\n    if (this.config.options.enableAnsiNullDefault === true) {\n      options.push('set ansi_null_dflt_on on');\n    } else if (this.config.options.enableAnsiNullDefault === false) {\n      options.push('set ansi_null_dflt_on off');\n    }\n\n    if (this.config.options.enableAnsiPadding === true) {\n      options.push('set ansi_padding on');\n    } else if (this.config.options.enableAnsiPadding === false) {\n      options.push('set ansi_padding off');\n    }\n\n    if (this.config.options.enableAnsiWarnings === true) {\n      options.push('set ansi_warnings on');\n    } else if (this.config.options.enableAnsiWarnings === false) {\n      options.push('set ansi_warnings off');\n    }\n\n    if (this.config.options.enableArithAbort === true) {\n      options.push('set arithabort on');\n    } else if (this.config.options.enableArithAbort === false) {\n      options.push('set arithabort off');\n    }\n\n    if (this.config.options.enableConcatNullYieldsNull === true) {\n      options.push('set concat_null_yields_null on');\n    } else if (this.config.options.enableConcatNullYieldsNull === false) {\n      options.push('set concat_null_yields_null off');\n    }\n\n    if (this.config.options.enableCursorCloseOnCommit === true) {\n      options.push('set cursor_close_on_commit on');\n    } else if (this.config.options.enableCursorCloseOnCommit === false) {\n      options.push('set cursor_close_on_commit off');\n    }\n\n    if (this.config.options.datefirst !== null) {\n      options.push(`set datefirst ${this.config.options.datefirst}`);\n    }\n\n    if (this.config.options.dateFormat !== null) {\n      options.push(`set dateformat ${this.config.options.dateFormat}`);\n    }\n\n    if (this.config.options.enableImplicitTransactions === true) {\n      options.push('set implicit_transactions on');\n    } else if (this.config.options.enableImplicitTransactions === false) {\n      options.push('set implicit_transactions off');\n    }\n\n    if (this.config.options.language !== null) {\n      options.push(`set language ${this.config.options.language}`);\n    }\n\n    if (this.config.options.enableNumericRoundabort === true) {\n      options.push('set numeric_roundabort on');\n    } else if (this.config.options.enableNumericRoundabort === false) {\n      options.push('set numeric_roundabort off');\n    }\n\n    if (this.config.options.enableQuotedIdentifier === true) {\n      options.push('set quoted_identifier on');\n    } else if (this.config.options.enableQuotedIdentifier === false) {\n      options.push('set quoted_identifier off');\n    }\n\n    if (this.config.options.textsize !== null) {\n      options.push(`set textsize ${this.config.options.textsize}`);\n    }\n\n    if (this.config.options.connectionIsolationLevel !== null) {\n      options.push(`set transaction isolation level ${this.getIsolationLevelText(this.config.options.connectionIsolationLevel)}`);\n    }\n\n    if (this.config.options.abortTransactionOnError === true) {\n      options.push('set xact_abort on');\n    } else if (this.config.options.abortTransactionOnError === false) {\n      options.push('set xact_abort off');\n    }\n\n    return options.join('\\n');\n  }\n\n  /**\n   * @private\n   */\n  processedInitialSql() {\n    this.clearConnectTimer();\n    this.emit('connect');\n  }\n\n  /**\n   * Execute the SQL batch represented by [[Request]].\n   * There is no param support, and unlike [[Request.execSql]],\n   * it is not likely that SQL Server will reuse the execution plan it generates for the SQL.\n   *\n   * In almost all cases, [[Request.execSql]] will be a better choice.\n   *\n   * @param request A [[Request]] object representing the request.\n   */\n  execSqlBatch(request: Request) {\n    this.makeRequest(request, TYPE.SQL_BATCH, new SqlBatchPayload(request.sqlTextOrProcedure!, this.currentTransactionDescriptor(), this.config.options));\n  }\n\n  /**\n   *  Execute the SQL represented by [[Request]].\n   *\n   * As `sp_executesql` is used to execute the SQL, if the same SQL is executed multiples times\n   * using this function, the SQL Server query optimizer is likely to reuse the execution plan it generates\n   * for the first execution. This may also result in SQL server treating the request like a stored procedure\n   * which can result in the [[Event_doneInProc]] or [[Event_doneProc]] events being emitted instead of the\n   * [[Event_done]] event you might expect. Using [[execSqlBatch]] will prevent this from occurring but may have a negative performance impact.\n   *\n   * Beware of the way that scoping rules apply, and how they may [affect local temp tables](http://weblogs.sqlteam.com/mladenp/archive/2006/11/03/17197.aspx)\n   * If you're running in to scoping issues, then [[execSqlBatch]] may be a better choice.\n   * See also [issue #24](https://github.com/pekim/tedious/issues/24)\n   *\n   * @param request A [[Request]] object representing the request.\n   */\n  execSql(request: Request) {\n    try {\n      request.validateParameters(this.databaseCollation);\n    } catch (error: any) {\n      request.error = error;\n\n      process.nextTick(() => {\n        this.debug.log(error.message);\n        request.callback(error);\n      });\n\n      return;\n    }\n\n    const parameters: Parameter[] = [];\n\n    parameters.push({\n      type: TYPES.NVarChar,\n      name: 'statement',\n      value: request.sqlTextOrProcedure,\n      output: false,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n\n    if (request.parameters.length) {\n      parameters.push({\n        type: TYPES.NVarChar,\n        name: 'params',\n        value: request.makeParamsParameter(request.parameters),\n        output: false,\n        length: undefined,\n        precision: undefined,\n        scale: undefined\n      });\n\n      parameters.push(...request.parameters);\n    }\n\n    this.makeRequest(request, TYPE.RPC_REQUEST, new RpcRequestPayload(Procedures.Sp_ExecuteSql, parameters, this.currentTransactionDescriptor(), this.config.options, this.databaseCollation));\n  }\n\n  /**\n   * Creates a new BulkLoad instance.\n   *\n   * @param table The name of the table to bulk-insert into.\n   * @param options A set of bulk load options.\n   */\n  newBulkLoad(table: string, callback: BulkLoadCallback): BulkLoad\n  newBulkLoad(table: string, options: BulkLoadOptions, callback: BulkLoadCallback): BulkLoad\n  newBulkLoad(table: string, callbackOrOptions: BulkLoadOptions | BulkLoadCallback, callback?: BulkLoadCallback) {\n    let options: BulkLoadOptions;\n\n    if (callback === undefined) {\n      callback = callbackOrOptions as BulkLoadCallback;\n      options = {};\n    } else {\n      options = callbackOrOptions as BulkLoadOptions;\n    }\n\n    if (typeof options !== 'object') {\n      throw new TypeError('\"options\" argument must be an object');\n    }\n    return new BulkLoad(table, this.databaseCollation, this.config.options, options, callback);\n  }\n\n  /**\n   * Execute a [[BulkLoad]].\n   *\n   * ```js\n   * // We want to perform a bulk load into a table with the following format:\n   * // CREATE TABLE employees (first_name nvarchar(255), last_name nvarchar(255), day_of_birth date);\n   *\n   * const bulkLoad = connection.newBulkLoad('employees', (err, rowCount) => {\n   *   // ...\n   * });\n   *\n   * // First, we need to specify the columns that we want to write to,\n   * // and their definitions. These definitions must match the actual table,\n   * // otherwise the bulk load will fail.\n   * bulkLoad.addColumn('first_name', TYPES.NVarchar, { nullable: false });\n   * bulkLoad.addColumn('last_name', TYPES.NVarchar, { nullable: false });\n   * bulkLoad.addColumn('date_of_birth', TYPES.Date, { nullable: false });\n   *\n   * // Execute a bulk load with a predefined list of rows.\n   * //\n   * // Note that these rows are held in memory until the\n   * // bulk load was performed, so if you need to write a large\n   * // number of rows (e.g. by reading from a CSV file),\n   * // passing an `AsyncIterable` is advisable to keep memory usage low.\n   * connection.execBulkLoad(bulkLoad, [\n   *   { 'first_name': 'Steve', 'last_name': 'Jobs', 'day_of_birth': new Date('02-24-1955') },\n   *   { 'first_name': 'Bill', 'last_name': 'Gates', 'day_of_birth': new Date('10-28-1955') }\n   * ]);\n   * ```\n   *\n   * @param bulkLoad A previously created [[BulkLoad]].\n   * @param rows A [[Iterable]] or [[AsyncIterable]] that contains the rows that should be bulk loaded.\n   */\n  execBulkLoad(bulkLoad: BulkLoad, rows: AsyncIterable<unknown[] | { [columnName: string]: unknown }> | Iterable<unknown[] | { [columnName: string]: unknown }>): void\n\n  execBulkLoad(bulkLoad: BulkLoad, rows?: AsyncIterable<unknown[] | { [columnName: string]: unknown }> | Iterable<unknown[] | { [columnName: string]: unknown }>) {\n    bulkLoad.executionStarted = true;\n\n    if (rows) {\n      if (bulkLoad.streamingMode) {\n        throw new Error(\"Connection.execBulkLoad can't be called with a BulkLoad that was put in streaming mode.\");\n      }\n\n      if (bulkLoad.firstRowWritten) {\n        throw new Error(\"Connection.execBulkLoad can't be called with a BulkLoad that already has rows written to it.\");\n      }\n\n      const rowStream = Readable.from(rows);\n\n      // Destroy the packet transform if an error happens in the row stream,\n      // e.g. if an error is thrown from within a generator or stream.\n      rowStream.on('error', (err) => {\n        bulkLoad.rowToPacketTransform.destroy(err);\n      });\n\n      // Destroy the row stream if an error happens in the packet transform,\n      // e.g. if the bulk load is cancelled.\n      bulkLoad.rowToPacketTransform.on('error', (err) => {\n        rowStream.destroy(err);\n      });\n\n      rowStream.pipe(bulkLoad.rowToPacketTransform);\n    } else if (!bulkLoad.streamingMode) {\n      // If the bulkload was not put into streaming mode by the user,\n      // we end the rowToPacketTransform here for them.\n      //\n      // If it was put into streaming mode, it's the user's responsibility\n      // to end the stream.\n      bulkLoad.rowToPacketTransform.end();\n    }\n\n    const onCancel = () => {\n      request.cancel();\n    };\n\n    const payload = new BulkLoadPayload(bulkLoad);\n\n    const request = new Request(bulkLoad.getBulkInsertSql(), (error: (Error & { code?: string }) | null | undefined) => {\n      bulkLoad.removeListener('cancel', onCancel);\n\n      if (error) {\n        if (error.code === 'UNKNOWN') {\n          error.message += ' This is likely because the schema of the BulkLoad does not match the schema of the table you are attempting to insert into.';\n        }\n        bulkLoad.error = error;\n        bulkLoad.callback(error);\n        return;\n      }\n\n      this.makeRequest(bulkLoad, TYPE.BULK_LOAD, payload);\n    });\n\n    bulkLoad.once('cancel', onCancel);\n\n    this.execSqlBatch(request);\n  }\n\n  /**\n   * Prepare the SQL represented by the request.\n   *\n   * The request can then be used in subsequent calls to\n   * [[execute]] and [[unprepare]]\n   *\n   * @param request A [[Request]] object representing the request.\n   *   Parameters only require a name and type. Parameter values are ignored.\n   */\n  prepare(request: Request) {\n    const parameters: Parameter[] = [];\n\n    parameters.push({\n      type: TYPES.Int,\n      name: 'handle',\n      value: undefined,\n      output: true,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n\n    parameters.push({\n      type: TYPES.NVarChar,\n      name: 'params',\n      value: request.parameters.length ? request.makeParamsParameter(request.parameters) : null,\n      output: false,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n\n    parameters.push({\n      type: TYPES.NVarChar,\n      name: 'stmt',\n      value: request.sqlTextOrProcedure,\n      output: false,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n\n    request.preparing = true;\n\n    // TODO: We need to clean up this event handler, otherwise this leaks memory\n    request.on('returnValue', (name: string, value: any) => {\n      if (name === 'handle') {\n        request.handle = value;\n      } else {\n        request.error = new RequestError(`Tedious > Unexpected output parameter ${name} from sp_prepare`);\n      }\n    });\n\n    this.makeRequest(request, TYPE.RPC_REQUEST, new RpcRequestPayload(Procedures.Sp_Prepare, parameters, this.currentTransactionDescriptor(), this.config.options, this.databaseCollation));\n  }\n\n  /**\n   * Release the SQL Server resources associated with a previously prepared request.\n   *\n   * @param request A [[Request]] object representing the request.\n   *   Parameters only require a name and type.\n   *   Parameter values are ignored.\n   */\n  unprepare(request: Request) {\n    const parameters: Parameter[] = [];\n\n    parameters.push({\n      type: TYPES.Int,\n      name: 'handle',\n      // TODO: Abort if `request.handle` is not set\n      value: request.handle,\n      output: false,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n\n    this.makeRequest(request, TYPE.RPC_REQUEST, new RpcRequestPayload(Procedures.Sp_Unprepare, parameters, this.currentTransactionDescriptor(), this.config.options, this.databaseCollation));\n  }\n\n  /**\n   * Execute previously prepared SQL, using the supplied parameters.\n   *\n   * @param request A previously prepared [[Request]].\n   * @param parameters  An object whose names correspond to the names of\n   *   parameters that were added to the [[Request]] before it was prepared.\n   *   The object's values are passed as the parameters' values when the\n   *   request is executed.\n   */\n  execute(request: Request, parameters?: { [key: string]: unknown }) {\n    const executeParameters: Parameter[] = [];\n\n    executeParameters.push({\n      type: TYPES.Int,\n      name: '',\n      // TODO: Abort if `request.handle` is not set\n      value: request.handle,\n      output: false,\n      length: undefined,\n      precision: undefined,\n      scale: undefined\n    });\n\n    try {\n      for (let i = 0, len = request.parameters.length; i < len; i++) {\n        const parameter = request.parameters[i];\n\n        executeParameters.push({\n          ...parameter,\n          value: parameter.type.validate(parameters ? parameters[parameter.name] : null, this.databaseCollation)\n        });\n      }\n    } catch (error: any) {\n      request.error = error;\n\n      process.nextTick(() => {\n        this.debug.log(error.message);\n        request.callback(error);\n      });\n\n      return;\n    }\n\n    this.makeRequest(request, TYPE.RPC_REQUEST, new RpcRequestPayload(Procedures.Sp_Execute, executeParameters, this.currentTransactionDescriptor(), this.config.options, this.databaseCollation));\n  }\n\n  /**\n   * Call a stored procedure represented by [[Request]].\n   *\n   * @param request A [[Request]] object representing the request.\n   */\n  callProcedure(request: Request) {\n    try {\n      request.validateParameters(this.databaseCollation);\n    } catch (error: any) {\n      request.error = error;\n\n      process.nextTick(() => {\n        this.debug.log(error.message);\n        request.callback(error);\n      });\n\n      return;\n    }\n\n    this.makeRequest(request, TYPE.RPC_REQUEST, new RpcRequestPayload(request.sqlTextOrProcedure!, request.parameters, this.currentTransactionDescriptor(), this.config.options, this.databaseCollation));\n  }\n\n  /**\n   * Start a transaction.\n   *\n   * @param callback\n   * @param name A string representing a name to associate with the transaction.\n   *   Optional, and defaults to an empty string. Required when `isolationLevel`\n   *   is present.\n   * @param isolationLevel The isolation level that the transaction is to be run with.\n   *\n   *   The isolation levels are available from `require('tedious').ISOLATION_LEVEL`.\n   *   * `READ_UNCOMMITTED`\n   *   * `READ_COMMITTED`\n   *   * `REPEATABLE_READ`\n   *   * `SERIALIZABLE`\n   *   * `SNAPSHOT`\n   *\n   *   Optional, and defaults to the Connection's isolation level.\n   */\n  beginTransaction(callback: BeginTransactionCallback, name = '', isolationLevel = this.config.options.isolationLevel) {\n    assertValidIsolationLevel(isolationLevel, 'isolationLevel');\n\n    const transaction = new Transaction(name, isolationLevel);\n\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new Request('SET TRANSACTION ISOLATION LEVEL ' + (transaction.isolationLevelToTSQL()) + ';BEGIN TRAN ' + transaction.name, (err) => {\n        this.transactionDepth++;\n        if (this.transactionDepth === 1) {\n          this.inTransaction = true;\n        }\n        callback(err);\n      }));\n    }\n\n    const request = new Request(undefined, (err) => {\n      return callback(err, this.currentTransactionDescriptor());\n    });\n    return this.makeRequest(request, TYPE.TRANSACTION_MANAGER, transaction.beginPayload(this.currentTransactionDescriptor()));\n  }\n\n  /**\n   * Commit a transaction.\n   *\n   * There should be an active transaction - that is, [[beginTransaction]]\n   * should have been previously called.\n   *\n   * @param callback\n   * @param name A string representing a name to associate with the transaction.\n   *   Optional, and defaults to an empty string. Required when `isolationLevel`is present.\n   */\n  commitTransaction(callback: CommitTransactionCallback, name = '') {\n    const transaction = new Transaction(name);\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new Request('COMMIT TRAN ' + transaction.name, (err) => {\n        this.transactionDepth--;\n        if (this.transactionDepth === 0) {\n          this.inTransaction = false;\n        }\n\n        callback(err);\n      }));\n    }\n    const request = new Request(undefined, callback);\n    return this.makeRequest(request, TYPE.TRANSACTION_MANAGER, transaction.commitPayload(this.currentTransactionDescriptor()));\n  }\n\n  /**\n   * Rollback a transaction.\n   *\n   * There should be an active transaction - that is, [[beginTransaction]]\n   * should have been previously called.\n   *\n   * @param callback\n   * @param name A string representing a name to associate with the transaction.\n   *   Optional, and defaults to an empty string.\n   *   Required when `isolationLevel` is present.\n   */\n  rollbackTransaction(callback: RollbackTransactionCallback, name = '') {\n    const transaction = new Transaction(name);\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new Request('ROLLBACK TRAN ' + transaction.name, (err) => {\n        this.transactionDepth--;\n        if (this.transactionDepth === 0) {\n          this.inTransaction = false;\n        }\n        callback(err);\n      }));\n    }\n    const request = new Request(undefined, callback);\n    return this.makeRequest(request, TYPE.TRANSACTION_MANAGER, transaction.rollbackPayload(this.currentTransactionDescriptor()));\n  }\n\n  /**\n   * Set a savepoint within a transaction.\n   *\n   * There should be an active transaction - that is, [[beginTransaction]]\n   * should have been previously called.\n   *\n   * @param callback\n   * @param name A string representing a name to associate with the transaction.\\\n   *   Optional, and defaults to an empty string.\n   *   Required when `isolationLevel` is present.\n   */\n  saveTransaction(callback: SaveTransactionCallback, name: string) {\n    const transaction = new Transaction(name);\n    if (this.config.options.tdsVersion < '7_2') {\n      return this.execSqlBatch(new Request('SAVE TRAN ' + transaction.name, (err) => {\n        this.transactionDepth++;\n        callback(err);\n      }));\n    }\n    const request = new Request(undefined, callback);\n    return this.makeRequest(request, TYPE.TRANSACTION_MANAGER, transaction.savePayload(this.currentTransactionDescriptor()));\n  }\n\n  /**\n   * Run the given callback after starting a transaction, and commit or\n   * rollback the transaction afterwards.\n   *\n   * This is a helper that employs [[beginTransaction]], [[commitTransaction]],\n   * [[rollbackTransaction]], and [[saveTransaction]] to greatly simplify the\n   * use of database transactions and automatically handle transaction nesting.\n   *\n   * @param cb\n   * @param isolationLevel\n   *   The isolation level that the transaction is to be run with.\n   *\n   *   The isolation levels are available from `require('tedious').ISOLATION_LEVEL`.\n   *   * `READ_UNCOMMITTED`\n   *   * `READ_COMMITTED`\n   *   * `REPEATABLE_READ`\n   *   * `SERIALIZABLE`\n   *   * `SNAPSHOT`\n   *\n   *   Optional, and defaults to the Connection's isolation level.\n   */\n  transaction(cb: (err: Error | null | undefined, txDone?: <T extends TransactionDoneCallback>(err: Error | null | undefined, done: T, ...args: CallbackParameters<T>) => void) => void, isolationLevel?: typeof ISOLATION_LEVEL[keyof typeof ISOLATION_LEVEL]) {\n    if (typeof cb !== 'function') {\n      throw new TypeError('`cb` must be a function');\n    }\n\n    const useSavepoint = this.inTransaction;\n    const name = '_tedious_' + (crypto.randomBytes(10).toString('hex'));\n    const txDone: <T extends TransactionDoneCallback>(err: Error | null | undefined, done: T, ...args: CallbackParameters<T>) => void = (err, done, ...args) => {\n      if (err) {\n        if (this.inTransaction && this.state === this.STATE.LOGGED_IN) {\n          this.rollbackTransaction((txErr) => {\n            done(txErr || err, ...args);\n          }, name);\n        } else {\n          done(err, ...args);\n        }\n      } else if (useSavepoint) {\n        if (this.config.options.tdsVersion < '7_2') {\n          this.transactionDepth--;\n        }\n        done(null, ...args);\n      } else {\n        this.commitTransaction((txErr) => {\n          done(txErr, ...args);\n        }, name);\n      }\n    };\n\n    if (useSavepoint) {\n      return this.saveTransaction((err) => {\n        if (err) {\n          return cb(err);\n        }\n\n        if (isolationLevel) {\n          return this.execSqlBatch(new Request('SET transaction isolation level ' + this.getIsolationLevelText(isolationLevel), (err) => {\n            return cb(err, txDone);\n          }));\n        } else {\n          return cb(null, txDone);\n        }\n      }, name);\n    } else {\n      return this.beginTransaction((err) => {\n        if (err) {\n          return cb(err);\n        }\n\n        return cb(null, txDone);\n      }, name, isolationLevel);\n    }\n  }\n\n  /**\n   * @private\n   */\n  makeRequest(request: Request | BulkLoad, packetType: number, payload: (Iterable<Buffer> | AsyncIterable<Buffer>) & { toString: (indent?: string) => string }) {\n    if (this.state !== this.STATE.LOGGED_IN) {\n      const message = 'Requests can only be made in the ' + this.STATE.LOGGED_IN.name + ' state, not the ' + this.state.name + ' state';\n      this.debug.log(message);\n      request.callback(new RequestError(message, 'EINVALIDSTATE'));\n    } else if (request.canceled) {\n      process.nextTick(() => {\n        request.callback(new RequestError('Canceled.', 'ECANCEL'));\n      });\n    } else {\n      if (packetType === TYPE.SQL_BATCH) {\n        this.isSqlBatch = true;\n      } else {\n        this.isSqlBatch = false;\n      }\n\n      this.request = request;\n      request.connection! = this;\n      request.rowCount! = 0;\n      request.rows! = [];\n      request.rst! = [];\n\n      const onCancel = () => {\n        payloadStream.unpipe(message);\n        payloadStream.destroy(new RequestError('Canceled.', 'ECANCEL'));\n\n        // set the ignore bit and end the message.\n        message.ignore = true;\n        message.end();\n\n        if (request instanceof Request && request.paused) {\n          // resume the request if it was paused so we can read the remaining tokens\n          request.resume();\n        }\n      };\n\n      request.once('cancel', onCancel);\n\n      this.createRequestTimer();\n\n      const message = new Message({ type: packetType, resetConnection: this.resetConnectionOnNextRequest });\n      this.messageIo.outgoingMessageStream.write(message);\n      this.transitionTo(this.STATE.SENT_CLIENT_REQUEST);\n\n      message.once('finish', () => {\n        request.removeListener('cancel', onCancel);\n        request.once('cancel', this._cancelAfterRequestSent);\n\n        this.resetConnectionOnNextRequest = false;\n        this.debug.payload(function() {\n          return payload!.toString('  ');\n        });\n      });\n\n      const payloadStream = Readable.from(payload);\n      payloadStream.once('error', (error) => {\n        payloadStream.unpipe(message);\n\n        // Only set a request error if no error was set yet.\n        request.error ??= error;\n\n        message.ignore = true;\n        message.end();\n      });\n      payloadStream.pipe(message);\n    }\n  }\n\n  /**\n   * Cancel currently executed request.\n   */\n  cancel() {\n    if (!this.request) {\n      return false;\n    }\n\n    if (this.request.canceled) {\n      return false;\n    }\n\n    this.request.cancel();\n    return true;\n  }\n\n  /**\n   * Reset the connection to its initial state.\n   * Can be useful for connection pool implementations.\n   *\n   * @param callback\n   */\n  reset(callback: ResetCallback) {\n    const request = new Request(this.getInitialSql(), (err) => {\n      if (this.config.options.tdsVersion < '7_2') {\n        this.inTransaction = false;\n      }\n      callback(err);\n    });\n    this.resetConnectionOnNextRequest = true;\n    this.execSqlBatch(request);\n  }\n\n  /**\n   * @private\n   */\n  currentTransactionDescriptor() {\n    return this.transactionDescriptors[this.transactionDescriptors.length - 1];\n  }\n\n  /**\n   * @private\n   */\n  getIsolationLevelText(isolationLevel: typeof ISOLATION_LEVEL[keyof typeof ISOLATION_LEVEL]) {\n    switch (isolationLevel) {\n      case ISOLATION_LEVEL.READ_UNCOMMITTED:\n        return 'read uncommitted';\n      case ISOLATION_LEVEL.REPEATABLE_READ:\n        return 'repeatable read';\n      case ISOLATION_LEVEL.SERIALIZABLE:\n        return 'serializable';\n      case ISOLATION_LEVEL.SNAPSHOT:\n        return 'snapshot';\n      default:\n        return 'read committed';\n    }\n  }\n}\n\nfunction isTransientError(error: AggregateError | ConnectionError): boolean {\n  if (error instanceof AggregateError) {\n    error = error.errors[0];\n  }\n  return (error instanceof ConnectionError) && !!error.isTransient;\n}\n\nexport default Connection;\nmodule.exports = Connection;\n\nConnection.prototype.STATE = {\n  INITIALIZED: {\n    name: 'Initialized',\n    events: {}\n  },\n  CONNECTING: {\n    name: 'Connecting',\n    enter: function() {\n      this.initialiseConnection();\n    },\n    events: {\n      socketError: function() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_PRELOGIN: {\n    name: 'SentPrelogin',\n    enter: function() {\n      (async () => {\n        let messageBuffer = Buffer.alloc(0);\n\n        let message;\n        try {\n          message = await this.messageIo.readMessage();\n        } catch (err: any) {\n          return this.socketError(err);\n        }\n\n        for await (const data of message) {\n          messageBuffer = Buffer.concat([messageBuffer, data]);\n        }\n\n        const preloginPayload = new PreloginPayload(messageBuffer);\n        this.debug.payload(function() {\n          return preloginPayload.toString('  ');\n        });\n\n        if (preloginPayload.fedAuthRequired === 1) {\n          this.fedAuthRequired = true;\n        }\n        if ('strict' !== this.config.options.encrypt && (preloginPayload.encryptionString === 'ON' || preloginPayload.encryptionString === 'REQ')) {\n          if (!this.config.options.encrypt) {\n            this.emit('connect', new ConnectionError(\"Server requires encryption, set 'encrypt' config option to true.\", 'EENCRYPT'));\n            return this.close();\n          }\n\n          try {\n            this.transitionTo(this.STATE.SENT_TLSSSLNEGOTIATION);\n            await this.messageIo.startTls(this.secureContextOptions, this.config.options.serverName ? this.config.options.serverName : this.routingData?.server ?? this.config.server, this.config.options.trustServerCertificate);\n          } catch (err: any) {\n            return this.socketError(err);\n          }\n        }\n\n        this.sendLogin7Packet();\n\n        const { authentication } = this.config;\n\n        switch (authentication.type) {\n          case 'azure-active-directory-password':\n          case 'azure-active-directory-msi-vm':\n          case 'azure-active-directory-msi-app-service':\n          case 'azure-active-directory-service-principal-secret':\n          case 'azure-active-directory-default':\n            this.transitionTo(this.STATE.SENT_LOGIN7_WITH_FEDAUTH);\n            break;\n          case 'ntlm':\n            this.transitionTo(this.STATE.SENT_LOGIN7_WITH_NTLM);\n            break;\n          default:\n            this.transitionTo(this.STATE.SENT_LOGIN7_WITH_STANDARD_LOGIN);\n            break;\n        }\n      })().catch((err) => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  REROUTING: {\n    name: 'ReRouting',\n    enter: function() {\n      this.cleanupConnection(CLEANUP_TYPE.REDIRECT);\n    },\n    events: {\n      message: function() {\n      },\n      socketError: function() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      reconnect: function() {\n        this.transitionTo(this.STATE.CONNECTING);\n      }\n    }\n  },\n  TRANSIENT_FAILURE_RETRY: {\n    name: 'TRANSIENT_FAILURE_RETRY',\n    enter: function() {\n      this.curTransientRetryCount++;\n      this.cleanupConnection(CLEANUP_TYPE.RETRY);\n    },\n    events: {\n      message: function() {\n      },\n      socketError: function() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      retry: function() {\n        this.createRetryTimer();\n      }\n    }\n  },\n  SENT_TLSSSLNEGOTIATION: {\n    name: 'SentTLSSSLNegotiation',\n    events: {\n      socketError: function() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_STANDARD_LOGIN: {\n    name: 'SentLogin7WithStandardLogin',\n    enter: function() {\n      (async () => {\n        let message;\n        try {\n          message = await this.messageIo.readMessage();\n        } catch (err: any) {\n          return this.socketError(err);\n        }\n\n        const handler = new Login7TokenHandler(this);\n        const tokenStreamParser = this.createTokenStreamParser(message, handler);\n\n        await once(tokenStreamParser, 'end');\n\n        if (handler.loginAckReceived) {\n          if (handler.routingData) {\n            this.routingData = handler.routingData;\n            this.transitionTo(this.STATE.REROUTING);\n          } else {\n            this.transitionTo(this.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\n          }\n        } else if (this.loginError) {\n          if (isTransientError(this.loginError)) {\n            this.debug.log('Initiating retry on transient error');\n            this.transitionTo(this.STATE.TRANSIENT_FAILURE_RETRY);\n          } else {\n            this.emit('connect', this.loginError);\n            this.transitionTo(this.STATE.FINAL);\n          }\n        } else {\n          this.emit('connect', new ConnectionError('Login failed.', 'ELOGIN'));\n          this.transitionTo(this.STATE.FINAL);\n        }\n      })().catch((err) => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_NTLM: {\n    name: 'SentLogin7WithNTLMLogin',\n    enter: function() {\n      (async () => {\n        while (true) {\n          let message;\n          try {\n            message = await this.messageIo.readMessage();\n          } catch (err: any) {\n            return this.socketError(err);\n          }\n\n          const handler = new Login7TokenHandler(this);\n          const tokenStreamParser = this.createTokenStreamParser(message, handler);\n\n          await once(tokenStreamParser, 'end');\n\n          if (handler.loginAckReceived) {\n            if (handler.routingData) {\n              this.routingData = handler.routingData;\n              return this.transitionTo(this.STATE.REROUTING);\n            } else {\n              return this.transitionTo(this.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\n            }\n          } else if (this.ntlmpacket) {\n            const authentication = this.config.authentication as NtlmAuthentication;\n\n            const payload = new NTLMResponsePayload({\n              domain: authentication.options.domain,\n              userName: authentication.options.userName,\n              password: authentication.options.password,\n              ntlmpacket: this.ntlmpacket\n            });\n\n            this.messageIo.sendMessage(TYPE.NTLMAUTH_PKT, payload.data);\n            this.debug.payload(function() {\n              return payload.toString('  ');\n            });\n\n            this.ntlmpacket = undefined;\n          } else if (this.loginError) {\n            if (isTransientError(this.loginError)) {\n              this.debug.log('Initiating retry on transient error');\n              return this.transitionTo(this.STATE.TRANSIENT_FAILURE_RETRY);\n            } else {\n              this.emit('connect', this.loginError);\n              return this.transitionTo(this.STATE.FINAL);\n            }\n          } else {\n            this.emit('connect', new ConnectionError('Login failed.', 'ELOGIN'));\n            return this.transitionTo(this.STATE.FINAL);\n          }\n        }\n\n      })().catch((err) => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_LOGIN7_WITH_FEDAUTH: {\n    name: 'SentLogin7Withfedauth',\n    enter: function() {\n      (async () => {\n        let message;\n        try {\n          message = await this.messageIo.readMessage();\n        } catch (err: any) {\n          return this.socketError(err);\n        }\n\n        const handler = new Login7TokenHandler(this);\n        const tokenStreamParser = this.createTokenStreamParser(message, handler);\n        await once(tokenStreamParser, 'end');\n        if (handler.loginAckReceived) {\n          if (handler.routingData) {\n            this.routingData = handler.routingData;\n            this.transitionTo(this.STATE.REROUTING);\n          } else {\n            this.transitionTo(this.STATE.LOGGED_IN_SENDING_INITIAL_SQL);\n          }\n\n          return;\n        }\n\n        const fedAuthInfoToken = handler.fedAuthInfoToken;\n\n        if (fedAuthInfoToken && fedAuthInfoToken.stsurl && fedAuthInfoToken.spn) {\n          const authentication = this.config.authentication as AzureActiveDirectoryPasswordAuthentication | AzureActiveDirectoryMsiVmAuthentication | AzureActiveDirectoryMsiAppServiceAuthentication | AzureActiveDirectoryServicePrincipalSecret | AzureActiveDirectoryDefaultAuthentication;\n          const tokenScope = new URL('/.default', fedAuthInfoToken.spn).toString();\n\n          let credentials;\n\n          switch (authentication.type) {\n            case 'azure-active-directory-password':\n              credentials = new UsernamePasswordCredential(\n                authentication.options.tenantId ?? 'common',\n                authentication.options.clientId,\n                authentication.options.userName,\n                authentication.options.password\n              );\n              break;\n            case 'azure-active-directory-msi-vm':\n            case 'azure-active-directory-msi-app-service':\n              const msiArgs = authentication.options.clientId ? [authentication.options.clientId, {}] : [{}];\n              credentials = new ManagedIdentityCredential(...msiArgs);\n              break;\n            case 'azure-active-directory-default':\n              const args = authentication.options.clientId ? { managedIdentityClientId: authentication.options.clientId } : {};\n              credentials = new DefaultAzureCredential(args);\n              break;\n            case 'azure-active-directory-service-principal-secret':\n              credentials = new ClientSecretCredential(\n                authentication.options.tenantId,\n                authentication.options.clientId,\n                authentication.options.clientSecret\n              );\n              break;\n          }\n\n          let tokenResponse;\n          try {\n            tokenResponse = await credentials.getToken(tokenScope);\n          } catch (err) {\n            this.loginError = new AggregateError(\n              [new ConnectionError('Security token could not be authenticated or authorized.', 'EFEDAUTH'), err]);\n            this.emit('connect', this.loginError);\n            this.transitionTo(this.STATE.FINAL);\n            return;\n          }\n\n\n          const token = tokenResponse.token;\n          this.sendFedAuthTokenMessage(token);\n\n        } else if (this.loginError) {\n          if (isTransientError(this.loginError)) {\n            this.debug.log('Initiating retry on transient error');\n            this.transitionTo(this.STATE.TRANSIENT_FAILURE_RETRY);\n          } else {\n            this.emit('connect', this.loginError);\n            this.transitionTo(this.STATE.FINAL);\n          }\n        } else {\n          this.emit('connect', new ConnectionError('Login failed.', 'ELOGIN'));\n          this.transitionTo(this.STATE.FINAL);\n        }\n\n      })().catch((err) => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  LOGGED_IN_SENDING_INITIAL_SQL: {\n    name: 'LoggedInSendingInitialSql',\n    enter: function() {\n      (async () => {\n        this.sendInitialSql();\n        let message;\n        try {\n          message = await this.messageIo.readMessage();\n        } catch (err: any) {\n          return this.socketError(err);\n        }\n        const tokenStreamParser = this.createTokenStreamParser(message, new InitialSqlTokenHandler(this));\n        await once(tokenStreamParser, 'end');\n\n        this.transitionTo(this.STATE.LOGGED_IN);\n        this.processedInitialSql();\n\n      })().catch((err) => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function socketError() {\n        this.transitionTo(this.STATE.FINAL);\n      },\n      connectTimeout: function() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  LOGGED_IN: {\n    name: 'LoggedIn',\n    events: {\n      socketError: function() {\n        this.transitionTo(this.STATE.FINAL);\n      }\n    }\n  },\n  SENT_CLIENT_REQUEST: {\n    name: 'SentClientRequest',\n    enter: function() {\n      (async () => {\n        let message;\n        try {\n          message = await this.messageIo.readMessage();\n        } catch (err: any) {\n          return this.socketError(err);\n        }\n        // request timer is stopped on first data package\n        this.clearRequestTimer();\n\n        const tokenStreamParser = this.createTokenStreamParser(message, new RequestTokenHandler(this, this.request!));\n\n        // If the request was canceled and we have a `cancelTimer`\n        // defined, we send a attention message after the\n        // request message was fully sent off.\n        //\n        // We already started consuming the current message\n        // (but all the token handlers should be no-ops), and\n        // need to ensure the next message is handled by the\n        // `SENT_ATTENTION` state.\n        if (this.request?.canceled && this.cancelTimer) {\n          return this.transitionTo(this.STATE.SENT_ATTENTION);\n        }\n\n        const onResume = () => {\n          tokenStreamParser.resume();\n        };\n        const onPause = () => {\n          tokenStreamParser.pause();\n\n          this.request?.once('resume', onResume);\n        };\n\n        this.request?.on('pause', onPause);\n\n        if (this.request instanceof Request && this.request.paused) {\n          onPause();\n        }\n\n        const onCancel = () => {\n          tokenStreamParser.removeListener('end', onEndOfMessage);\n\n          if (this.request instanceof Request && this.request.paused) {\n            // resume the request if it was paused so we can read the remaining tokens\n            this.request.resume();\n          }\n\n          this.request?.removeListener('pause', onPause);\n          this.request?.removeListener('resume', onResume);\n\n          // The `_cancelAfterRequestSent` callback will have sent a\n          // attention message, so now we need to also switch to\n          // the `SENT_ATTENTION` state to make sure the attention ack\n          // message is processed correctly.\n          this.transitionTo(this.STATE.SENT_ATTENTION);\n        };\n\n        const onEndOfMessage = () => {\n          this.request?.removeListener('cancel', this._cancelAfterRequestSent);\n          this.request?.removeListener('cancel', onCancel);\n          this.request?.removeListener('pause', onPause);\n          this.request?.removeListener('resume', onResume);\n\n          this.transitionTo(this.STATE.LOGGED_IN);\n          const sqlRequest = this.request as Request;\n          this.request = undefined;\n          if (this.config.options.tdsVersion < '7_2' && sqlRequest.error && this.isSqlBatch) {\n            this.inTransaction = false;\n          }\n          sqlRequest.callback(sqlRequest.error, sqlRequest.rowCount, sqlRequest.rows);\n        };\n\n        tokenStreamParser.once('end', onEndOfMessage);\n        this.request?.once('cancel', onCancel);\n      })();\n\n    },\n    exit: function(nextState) {\n      this.clearRequestTimer();\n    },\n    events: {\n      socketError: function(err) {\n        const sqlRequest = this.request!;\n        this.request = undefined;\n        this.transitionTo(this.STATE.FINAL);\n\n        sqlRequest.callback(err);\n      }\n    }\n  },\n  SENT_ATTENTION: {\n    name: 'SentAttention',\n    enter: function() {\n      (async () => {\n        let message;\n        try {\n          message = await this.messageIo.readMessage();\n        } catch (err: any) {\n          return this.socketError(err);\n        }\n\n        const handler = new AttentionTokenHandler(this, this.request!);\n        const tokenStreamParser = this.createTokenStreamParser(message, handler);\n\n        await once(tokenStreamParser, 'end');\n        // 3.2.5.7 Sent Attention State\n        // Discard any data contained in the response, until we receive the attention response\n        if (handler.attentionReceived) {\n          this.clearCancelTimer();\n\n          const sqlRequest = this.request!;\n          this.request = undefined;\n          this.transitionTo(this.STATE.LOGGED_IN);\n\n          if (sqlRequest.error && sqlRequest.error instanceof RequestError && sqlRequest.error.code === 'ETIMEOUT') {\n            sqlRequest.callback(sqlRequest.error);\n          } else {\n            sqlRequest.callback(new RequestError('Canceled.', 'ECANCEL'));\n          }\n        }\n\n      })().catch((err) => {\n        process.nextTick(() => {\n          throw err;\n        });\n      });\n    },\n    events: {\n      socketError: function(err) {\n        const sqlRequest = this.request!;\n        this.request = undefined;\n\n        this.transitionTo(this.STATE.FINAL);\n\n        sqlRequest.callback(err);\n      }\n    }\n  },\n  FINAL: {\n    name: 'Final',\n    enter: function() {\n      this.cleanupConnection(CLEANUP_TYPE.NORMAL);\n    },\n    events: {\n      connectTimeout: function() {\n        // Do nothing, as the timer should be cleaned up.\n      },\n      message: function() {\n        // Do nothing\n      },\n      socketError: function() {\n        // Do nothing\n      }\n    }\n  }\n};\n"],"mappings":"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A;AACA;AACA,MAAMC,8BAA8B,GAAG,EAAE,GAAG,IAAI;AAChD;AACA;AACA;AACA,MAAMC,sBAAsB,GAAG,CAAC,GAAG,IAAI;AACvC;AACA;AACA;AACA,MAAMC,8BAA8B,GAAG,GAAG;AAC1C;AACA;AACA;AACA,MAAMC,mBAAmB,GAAG,CAAC,GAAG,IAAI;AACpC;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG,UAAU;AACnC;AACA;AACA;AACA,MAAMC,iBAAiB,GAAG,CAAC;AAC3B;AACA;AACA;AACA,MAAMC,YAAY,GAAG,IAAI;AACzB;AACA;AACA;AACA,MAAMC,mBAAmB,GAAG,KAAK;AACjC;AACA;AACA;AACA,MAAMC,gBAAgB,GAAG,YAAY;AACrC;AACA;AACA;AACA,MAAMC,kBAAkB,GAAG,KAAK;;AA2MhC;AACA;AACA;;AA0cA;AACA;AACA;AACA,MAAMC,YAAY,GAAG;EACnBC,MAAM,EAAE,CAAC;EACTC,QAAQ,EAAE,CAAC;EACXC,KAAK,EAAE;AACT,CAAC;AAOD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,UAAU,SAASC,oBAAY,CAAC;EACpC;AACF;AACA;EACEC,eAAe;EACf;AACF;AACA;EACEC,MAAM;EACN;AACF;AACA;EACEC,oBAAoB;EACpB;AACF;AACA;EACEC,aAAa;EACb;AACF;AACA;EACEC,sBAAsB;EACtB;AACF;AACA;EACEC,gBAAgB;EAChB;AACF;AACA;EACEC,UAAU;EACV;AACF;AACA;EACEC,sBAAsB;EACtB;AACF;AACA;EACEC,oBAAoB;EACpB;AACF;AACA;EACEC,MAAM;EACN;AACF;AACA;EACEC,UAAU;EACV;AACF;AACA;EACEC,KAAK;EACL;AACF;AACA;EACEC,UAAU;EACV;AACF;AACA;EACEC,gBAAgB;;EAEhB;AACF;AACA;;EAkBE;AACF;AACA;EACEC,WAAW;;EAEX;AACF;AACA;EACEC,SAAS;EACT;AACF;AACA;EACEC,KAAK;EAC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"}